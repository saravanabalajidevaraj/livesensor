{"remainingRequest":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-buttons\\src\\check-box\\check-box.js","dependencies":[{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-buttons\\src\\check-box\\check-box.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { __decorate } from \"tslib\";\nimport { Component, NotifyPropertyChanges, Property } from '@syncfusion/ej2-base';\nimport { Event, EventHandler } from '@syncfusion/ej2-base';\nimport { addClass, detach, getUniqueID, isRippleEnabled, removeClass, rippleEffect } from '@syncfusion/ej2-base';\nimport { wrapperInitialize, rippleMouseHandler } from './../common/common';\nvar CHECK = 'e-check';\nvar DISABLED = 'e-checkbox-disabled';\nvar FRAME = 'e-frame';\nvar INDETERMINATE = 'e-stop';\nvar LABEL = 'e-label';\nvar RIPPLE = 'e-ripple-container';\nvar RIPPLECHECK = 'e-ripple-check';\nvar RIPPLEINDETERMINATE = 'e-ripple-stop';\nvar RTL = 'e-rtl';\nvar WRAPPER = 'e-checkbox-wrapper';\n/**\n * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.\n * It contains checked, unchecked, and indeterminate states.\n * ```html\n * <input type=\"checkbox\" id=\"checkbox\"/>\n * <script>\n * var checkboxObj = new CheckBox({ label: \"Default\" });\n * checkboxObj.appendTo(\"#checkbox\");\n * </script>\n * ```\n */\nvar CheckBox = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(CheckBox, _super);\n    /**\n     * Constructor for creating the widget\n     * @private\n     */\n    function CheckBox(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.isKeyPressed = false;\n        return _this;\n    }\n    CheckBox.prototype.changeState = function (state) {\n        var ariaState;\n        var rippleSpan;\n        var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n        if (isRippleEnabled) {\n            rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        }\n        if (state === 'check') {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLEINDETERMINATE);\n                rippleSpan.classList.add(RIPPLECHECK);\n            }\n            ariaState = 'true';\n            this.element.checked = true;\n        }\n        else if (state === 'uncheck') {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            if (rippleSpan) {\n                removeClass([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);\n            }\n            ariaState = 'false';\n            this.element.checked = false;\n        }\n        else {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLECHECK);\n                rippleSpan.classList.add(RIPPLEINDETERMINATE);\n            }\n            ariaState = 'mixed';\n            this.element.indeterminate = true;\n        }\n        this.getWrapper().setAttribute('aria-checked', ariaState);\n    };\n    CheckBox.prototype.clickHandler = function (event) {\n        this.focusOutHandler();\n        if (this.indeterminate) {\n            this.changeState(this.checked ? 'check' : 'uncheck');\n            this.indeterminate = false;\n            this.element.indeterminate = false;\n        }\n        else if (this.checked) {\n            this.changeState('uncheck');\n            this.checked = false;\n        }\n        else {\n            this.changeState('check');\n            this.checked = true;\n        }\n        var changeEventArgs = { checked: this.element.checked, event: event };\n        this.trigger('change', changeEventArgs);\n    };\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    CheckBox.prototype.destroy = function () {\n        var _this = this;\n        var wrapper = this.getWrapper();\n        _super.prototype.destroy.call(this);\n        if (!this.disabled) {\n            this.unWireEvents();\n        }\n        if (this.tagName === 'INPUT') {\n            wrapper.parentNode.insertBefore(this.element, wrapper);\n            detach(wrapper);\n            this.element.checked = false;\n            if (this.indeterminate) {\n                this.element.indeterminate = false;\n            }\n            ['name', 'value', 'disabled'].forEach(function (key) {\n                _this.element.removeAttribute(key);\n            });\n        }\n        else {\n            ['role', 'aria-checked', 'class'].forEach(function (key) {\n                wrapper.removeAttribute(key);\n            });\n            wrapper.innerHTML = '';\n        }\n    };\n    CheckBox.prototype.focusHandler = function () {\n        if (this.isKeyPressed) {\n            this.getWrapper().classList.add('e-focus');\n        }\n    };\n    CheckBox.prototype.focusOutHandler = function () {\n        this.getWrapper().classList.remove('e-focus');\n    };\n    /**\n     * Gets the module name.\n     * @private\n     */\n    CheckBox.prototype.getModuleName = function () {\n        return 'checkbox';\n    };\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    CheckBox.prototype.getPersistData = function () {\n        return this.addOnPersist(['checked', 'indeterminate']);\n    };\n    CheckBox.prototype.getWrapper = function () {\n        return this.element.parentElement.parentElement;\n    };\n    CheckBox.prototype.initialize = function () {\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.changeState('check');\n        }\n        if (this.indeterminate) {\n            this.changeState();\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n    };\n    CheckBox.prototype.initWrapper = function () {\n        var wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER)) {\n            wrapper = this.createElement('div', {\n                className: WRAPPER, attrs: { 'role': 'checkbox', 'aria-checked': 'false' }\n            });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        var label = this.createElement('label', { attrs: { for: this.element.id } });\n        var frameSpan = this.createElement('span', { className: 'e-icons ' + FRAME });\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n        wrapper.appendChild(label);\n        label.appendChild(this.element);\n        label.appendChild(frameSpan);\n        if (isRippleEnabled) {\n            var rippleSpan = this.createElement('span', { className: RIPPLE });\n            if (this.labelPosition === 'Before') {\n                label.appendChild(rippleSpan);\n            }\n            else {\n                label.insertBefore(rippleSpan, frameSpan);\n            }\n            rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n        }\n        if (this.label) {\n            this.setText(this.label);\n        }\n    };\n    CheckBox.prototype.keyDownHandler = function () {\n        this.isKeyPressed = true;\n    };\n    CheckBox.prototype.labelMouseHandler = function (e) {\n        var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        rippleMouseHandler(e, rippleSpan);\n    };\n    CheckBox.prototype.mouseDownHandler = function () {\n        this.isKeyPressed = false;\n    };\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    CheckBox.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var wrapper = this.getWrapper();\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'checked':\n                    this.indeterminate = false;\n                    this.element.indeterminate = false;\n                    this.changeState(newProp.checked ? 'check' : 'uncheck');\n                    break;\n                case 'indeterminate':\n                    if (newProp.indeterminate) {\n                        this.changeState();\n                    }\n                    else {\n                        this.element.indeterminate = false;\n                        this.changeState(this.checked ? 'check' : 'uncheck');\n                    }\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        wrapper.classList.remove(DISABLED);\n                        wrapper.setAttribute('aria-disabled', 'false');\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrapper], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrapper], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrapper.classList.add(RTL);\n                    }\n                    else {\n                        wrapper.classList.remove(RTL);\n                    }\n                    break;\n                case 'label':\n                    this.setText(newProp.label);\n                    break;\n                case 'labelPosition':\n                    var label = wrapper.getElementsByClassName(LABEL)[0];\n                    var labelWrap = wrapper.getElementsByTagName('label')[0];\n                    detach(label);\n                    if (newProp.labelPosition === 'After') {\n                        labelWrap.appendChild(label);\n                    }\n                    else {\n                        labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);\n                    }\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n            }\n        }\n    };\n    /**\n     * Initialize Angular, React and Unique ID support.\n     * @private\n     */\n    CheckBox.prototype.preRender = function () {\n        var element = this.element;\n        this.tagName = this.element.tagName;\n        element = wrapperInitialize(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox');\n        this.element = element;\n        if (this.element.getAttribute('type') !== 'checkbox') {\n            this.element.setAttribute('type', 'checkbox');\n        }\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n    };\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    CheckBox.prototype.render = function () {\n        this.initWrapper();\n        this.initialize();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n    };\n    CheckBox.prototype.setDisabled = function () {\n        var wrapper = this.getWrapper();\n        this.element.disabled = true;\n        wrapper.classList.add(DISABLED);\n        wrapper.setAttribute('aria-disabled', 'true');\n    };\n    CheckBox.prototype.setText = function (text) {\n        var label = this.getWrapper().getElementsByClassName(LABEL)[0];\n        if (label) {\n            label.textContent = text;\n        }\n        else {\n            label = this.createElement('span', { className: LABEL, innerHTML: text });\n            var labelWrap = this.getWrapper().getElementsByTagName('label')[0];\n            if (this.labelPosition === 'Before') {\n                labelWrap.insertBefore(label, this.getWrapper().getElementsByClassName(FRAME)[0]);\n            }\n            else {\n                labelWrap.appendChild(label);\n            }\n        }\n    };\n    CheckBox.prototype.changeHandler = function (e) {\n        e.stopPropagation();\n    };\n    CheckBox.prototype.unWireEvents = function () {\n        var wrapper = this.getWrapper();\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        EventHandler.remove(document, 'keydown', this.keyDownHandler);\n        EventHandler.remove(wrapper, 'mousedown', this.mouseDownHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        var label = wrapper.getElementsByTagName('label')[0];\n        EventHandler.remove(label, 'mousedown', this.labelMouseHandler);\n        EventHandler.remove(label, 'mouseup', this.labelMouseHandler);\n        if (this.tagName === 'EJS-CHECKBOX') {\n            EventHandler.remove(this.element, 'change', this.changeHandler);\n        }\n    };\n    CheckBox.prototype.wireEvents = function () {\n        var wrapper = this.getWrapper();\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        EventHandler.add(document, 'keydown', this.keyDownHandler, this);\n        EventHandler.add(wrapper, 'mousedown', this.mouseDownHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        var label = wrapper.getElementsByTagName('label')[0];\n        EventHandler.add(label, 'mousedown', this.labelMouseHandler, this);\n        EventHandler.add(label, 'mouseup', this.labelMouseHandler, this);\n        if (this.tagName === 'EJS-CHECKBOX') {\n            EventHandler.add(this.element, 'change', this.changeHandler, this);\n        }\n    };\n    __decorate([\n        Event()\n    ], CheckBox.prototype, \"change\", void 0);\n    __decorate([\n        Event()\n    ], CheckBox.prototype, \"created\", void 0);\n    __decorate([\n        Property(false)\n    ], CheckBox.prototype, \"checked\", void 0);\n    __decorate([\n        Property('')\n    ], CheckBox.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(false)\n    ], CheckBox.prototype, \"disabled\", void 0);\n    __decorate([\n        Property(false)\n    ], CheckBox.prototype, \"indeterminate\", void 0);\n    __decorate([\n        Property('')\n    ], CheckBox.prototype, \"label\", void 0);\n    __decorate([\n        Property('After')\n    ], CheckBox.prototype, \"labelPosition\", void 0);\n    __decorate([\n        Property('')\n    ], CheckBox.prototype, \"name\", void 0);\n    __decorate([\n        Property('')\n    ], CheckBox.prototype, \"value\", void 0);\n    CheckBox = __decorate([\n        NotifyPropertyChanges\n    ], CheckBox);\n    return CheckBox;\n}(Component));\nexport { CheckBox };\n",null]}