{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\jspdf-autotable\\dist\\jspdf.plugin.autotable.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\jspdf-autotable\\dist\\jspdf.plugin.autotable.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/*!\r\n *\r\n *             jsPDF AutoTable plugin v3.0.13\r\n *\r\n *             Copyright (c) 2014 Simon Bengtsson, https://github.com/simonbengtsson/jsPDF-AutoTable\r\n *             Licensed under the MIT License.\r\n *             http://opensource.org/licenses/mit-license\r\n *\r\n *             * /if (typeof window === 'object') window.jspdfAutoTableVersion = '\" + newVersion + \"';/*\"\r\n *\r\n */\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n    if (typeof exports === 'object' && typeof module === 'object')\r\n        module.exports = factory(require(\"jspdf\"));\r\n    else if (typeof define === 'function' && define.amd)\r\n        define([\"jspdf\"], factory);\r\n    else {\r\n        var a = typeof exports === 'object' ? factory(require(\"jspdf\")) : factory(root[\"jsPDF\"]);\r\n        for (var i in a)\r\n            (typeof exports === 'object' ? exports : root)[i] = a[i];\r\n    }\r\n})(window, function (__WEBPACK_EXTERNAL_MODULE__4__) {\r\n    return /******/ (function (modules) {\r\n        /******/ // The module cache\r\n        /******/ var installedModules = {};\r\n        /******/\r\n        /******/ // The require function\r\n        /******/ function __webpack_require__(moduleId) {\r\n            /******/\r\n            /******/ // Check if module is in cache\r\n            /******/ if (installedModules[moduleId]) {\r\n                /******/ return installedModules[moduleId].exports;\r\n                /******/ }\r\n            /******/ // Create a new module (and put it into the cache)\r\n            /******/ var module = installedModules[moduleId] = {\r\n                /******/ i: moduleId,\r\n                /******/ l: false,\r\n                /******/ exports: {}\r\n                /******/ \r\n            };\r\n            /******/\r\n            /******/ // Execute the module function\r\n            /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n            /******/\r\n            /******/ // Flag the module as loaded\r\n            /******/ module.l = true;\r\n            /******/\r\n            /******/ // Return the exports of the module\r\n            /******/ return module.exports;\r\n            /******/ \r\n        }\r\n        /******/\r\n        /******/\r\n        /******/ // expose the modules object (__webpack_modules__)\r\n        /******/ __webpack_require__.m = modules;\r\n        /******/\r\n        /******/ // expose the module cache\r\n        /******/ __webpack_require__.c = installedModules;\r\n        /******/\r\n        /******/ // define getter function for harmony exports\r\n        /******/ __webpack_require__.d = function (exports, name, getter) {\r\n            /******/ if (!__webpack_require__.o(exports, name)) {\r\n                /******/ Object.defineProperty(exports, name, { enumerable: true, get: getter });\r\n                /******/ }\r\n            /******/ \r\n        };\r\n        /******/\r\n        /******/ // define __esModule on exports\r\n        /******/ __webpack_require__.r = function (exports) {\r\n            /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n                /******/ Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n                /******/ }\r\n            /******/ Object.defineProperty(exports, '__esModule', { value: true });\r\n            /******/ \r\n        };\r\n        /******/\r\n        /******/ // create a fake namespace object\r\n        /******/ // mode & 1: value is a module id, require it\r\n        /******/ // mode & 2: merge all properties of value into the ns\r\n        /******/ // mode & 4: return value when already ns object\r\n        /******/ // mode & 8|1: behave like require\r\n        /******/ __webpack_require__.t = function (value, mode) {\r\n            /******/ if (mode & 1)\r\n                value = __webpack_require__(value);\r\n            /******/ if (mode & 8)\r\n                return value;\r\n            /******/ if ((mode & 4) && typeof value === 'object' && value && value.__esModule)\r\n                return value;\r\n            /******/ var ns = Object.create(null);\r\n            /******/ __webpack_require__.r(ns);\r\n            /******/ Object.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n            /******/ if (mode & 2 && typeof value != 'string')\r\n                for (var key in value)\r\n                    __webpack_require__.d(ns, key, function (key) { return value[key]; }.bind(null, key));\r\n            /******/ return ns;\r\n            /******/ \r\n        };\r\n        /******/\r\n        /******/ // getDefaultExport function for compatibility with non-harmony modules\r\n        /******/ __webpack_require__.n = function (module) {\r\n            /******/ var getter = module && module.__esModule ?\r\n                /******/ function getDefault() { return module['default']; } :\r\n                /******/ function getModuleExports() { return module; };\r\n            /******/ __webpack_require__.d(getter, 'a', getter);\r\n            /******/ return getter;\r\n            /******/ \r\n        };\r\n        /******/\r\n        /******/ // Object.prototype.hasOwnProperty.call\r\n        /******/ __webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n        /******/\r\n        /******/ // __webpack_public_path__\r\n        /******/ __webpack_require__.p = \"\";\r\n        /******/\r\n        /******/\r\n        /******/ // Load entry module and return exports\r\n        /******/ return __webpack_require__(__webpack_require__.s = 5);\r\n        /******/ \r\n    })([\r\n        /* 0 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var defaultsDocument = null;\r\n            var previousTableState;\r\n            var tableState = null;\r\n            exports.globalDefaults = {};\r\n            exports.documentDefaults = {};\r\n            function default_1() {\r\n                return tableState;\r\n            }\r\n            exports.default = default_1;\r\n            function getGlobalOptions() {\r\n                return exports.globalDefaults;\r\n            }\r\n            exports.getGlobalOptions = getGlobalOptions;\r\n            function getDocumentOptions() {\r\n                return exports.documentDefaults;\r\n            }\r\n            exports.getDocumentOptions = getDocumentOptions;\r\n            var TableState = /** @class */ /*@__PURE__*/ (function () {\r\n                function TableState(doc) {\r\n                    this.doc = doc;\r\n                }\r\n                TableState.prototype.pageHeight = function () {\r\n                    return this.pageSize().height;\r\n                };\r\n                ;\r\n                TableState.prototype.pageWidth = function () {\r\n                    return this.pageSize().width;\r\n                };\r\n                ;\r\n                TableState.prototype.pageSize = function () {\r\n                    var pageSize = this.doc.internal.pageSize;\r\n                    // JSPDF 1.4 uses get functions instead of properties on pageSize\r\n                    if (pageSize.width == null) {\r\n                        pageSize = {\r\n                            width: pageSize.getWidth(),\r\n                            height: pageSize.getHeight()\r\n                        };\r\n                    }\r\n                    return pageSize;\r\n                };\r\n                ;\r\n                TableState.prototype.scaleFactor = function () {\r\n                    return this.doc.internal.scaleFactor;\r\n                };\r\n                ;\r\n                TableState.prototype.pageNumber = function () {\r\n                    return this.doc.internal.getCurrentPageInfo().pageNumber;\r\n                };\r\n                return TableState;\r\n            }());\r\n            function setupState(doc) {\r\n                previousTableState = tableState;\r\n                tableState = new TableState(doc);\r\n                if (doc !== defaultsDocument) {\r\n                    defaultsDocument = doc;\r\n                    exports.documentDefaults = {};\r\n                }\r\n            }\r\n            exports.setupState = setupState;\r\n            function resetState() {\r\n                tableState = previousTableState;\r\n            }\r\n            exports.resetState = resetState;\r\n            function setDefaults(defaults, doc) {\r\n                if (doc === void 0) {\r\n                    doc = null;\r\n                }\r\n                if (doc) {\r\n                    exports.documentDefaults = defaults || {};\r\n                    defaultsDocument = doc;\r\n                }\r\n                else {\r\n                    exports.globalDefaults = defaults || {};\r\n                }\r\n            }\r\n            exports.setDefaults = setDefaults;\r\n            /***/ \r\n        }),\r\n        /* 1 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var config_1 = __webpack_require__(2);\r\n            var state_1 = __webpack_require__(0);\r\n            var polyfills_1 = __webpack_require__(3);\r\n            function getStringWidth(text, styles) {\r\n                var fontSize = styles.fontSize / state_1.default().scaleFactor();\r\n                applyStyles(styles);\r\n                text = Array.isArray(text) ? text : [text];\r\n                var maxWidth = 0;\r\n                text.forEach(function (line) {\r\n                    var width = state_1.default().doc.getStringUnitWidth(line);\r\n                    if (width > maxWidth) {\r\n                        maxWidth = width;\r\n                    }\r\n                });\r\n                var precision = 10000 * state_1.default().scaleFactor();\r\n                maxWidth = Math.floor(maxWidth * precision) / precision;\r\n                return maxWidth * fontSize;\r\n            }\r\n            exports.getStringWidth = getStringWidth;\r\n            /**\r\n             * Ellipsize the text to fit in the width\r\n             */\r\n            function ellipsize(text, width, styles, ellipsizeStr) {\r\n                if (ellipsizeStr === void 0) {\r\n                    ellipsizeStr = '...';\r\n                }\r\n                if (Array.isArray(text)) {\r\n                    var value_1 = [];\r\n                    text.forEach(function (str, i) {\r\n                        value_1[i] = ellipsize(str, width, styles, ellipsizeStr);\r\n                    });\r\n                    return value_1;\r\n                }\r\n                var precision = 10000 * state_1.default().scaleFactor();\r\n                width = Math.ceil(width * precision) / precision;\r\n                if (width >= getStringWidth(text, styles)) {\r\n                    return text;\r\n                }\r\n                while (width < getStringWidth(text + ellipsizeStr, styles)) {\r\n                    if (text.length <= 1) {\r\n                        break;\r\n                    }\r\n                    text = text.substring(0, text.length - 1);\r\n                }\r\n                return text.trim() + ellipsizeStr;\r\n            }\r\n            exports.ellipsize = ellipsize;\r\n            function addTableBorder() {\r\n                var table = state_1.default().table;\r\n                var styles = { lineWidth: table.settings.tableLineWidth, lineColor: table.settings.tableLineColor };\r\n                applyStyles(styles);\r\n                var fs = getFillStyle(styles);\r\n                if (fs) {\r\n                    state_1.default().doc.rect(table.pageStartX, table.pageStartY, table.width, table.cursor.y - table.pageStartY, fs);\r\n                }\r\n            }\r\n            exports.addTableBorder = addTableBorder;\r\n            function getFillStyle(styles) {\r\n                var drawLine = styles.lineWidth > 0;\r\n                var drawBackground = styles.fillColor || styles.fillColor === 0;\r\n                if (drawLine && drawBackground) {\r\n                    return 'DF'; // Fill then stroke\r\n                }\r\n                else if (drawLine) {\r\n                    return 'S'; // Only stroke (transparent background)\r\n                }\r\n                else if (drawBackground) {\r\n                    return 'F'; // Only fill, no stroke\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            exports.getFillStyle = getFillStyle;\r\n            function applyUserStyles() {\r\n                applyStyles(state_1.default().table.userStyles);\r\n            }\r\n            exports.applyUserStyles = applyUserStyles;\r\n            function applyStyles(styles) {\r\n                var doc = state_1.default().doc;\r\n                var styleModifiers = {\r\n                    fillColor: doc.setFillColor,\r\n                    textColor: doc.setTextColor,\r\n                    fontStyle: doc.setFontStyle,\r\n                    lineColor: doc.setDrawColor,\r\n                    lineWidth: doc.setLineWidth,\r\n                    font: doc.setFont,\r\n                    fontSize: doc.setFontSize\r\n                };\r\n                Object.keys(styleModifiers).forEach(function (name) {\r\n                    var style = styles[name];\r\n                    var modifier = styleModifiers[name];\r\n                    if (typeof style !== 'undefined') {\r\n                        if (Array.isArray(style)) {\r\n                            modifier.apply(this, style);\r\n                        }\r\n                        else {\r\n                            modifier(style);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            exports.applyStyles = applyStyles;\r\n            // This is messy, only keep array and number format the next major version\r\n            function marginOrPadding(value, defaultValue) {\r\n                var newValue = {};\r\n                if (Array.isArray(value)) {\r\n                    if (value.length >= 4) {\r\n                        newValue = { 'top': value[0], 'right': value[1], 'bottom': value[2], 'left': value[3] };\r\n                    }\r\n                    else if (value.length === 3) {\r\n                        newValue = { 'top': value[0], 'right': value[1], 'bottom': value[2], 'left': value[1] };\r\n                    }\r\n                    else if (value.length === 2) {\r\n                        newValue = { 'top': value[0], 'right': value[1], 'bottom': value[0], 'left': value[1] };\r\n                    }\r\n                    else if (value.length === 1) {\r\n                        value = value[0];\r\n                    }\r\n                    else {\r\n                        value = defaultValue;\r\n                    }\r\n                }\r\n                else if (typeof value === 'object') {\r\n                    if (value['vertical']) {\r\n                        value['top'] = value['vertical'];\r\n                        value['bottom'] = value['vertical'];\r\n                    }\r\n                    if (value['horizontal']) {\r\n                        value['right'] = value['horizontal'];\r\n                        value['left'] = value['horizontal'];\r\n                    }\r\n                    for (var _i = 0, _a = ['top', 'right', 'bottom', 'left']; _i < _a.length; _i++) {\r\n                        var side = _a[_i];\r\n                        newValue[side] = (value[side] || value[side] === 0) ? value[side] : defaultValue;\r\n                    }\r\n                }\r\n                if (typeof value === 'number') {\r\n                    newValue = { 'top': value, 'right': value, 'bottom': value, 'left': value };\r\n                }\r\n                return newValue;\r\n            }\r\n            exports.marginOrPadding = marginOrPadding;\r\n            function styles(styles) {\r\n                styles = Array.isArray(styles) ? styles : [styles];\r\n                return polyfills_1.assign.apply(void 0, [config_1.defaultStyles()].concat(styles));\r\n            }\r\n            exports.styles = styles;\r\n            /***/ \r\n        }),\r\n        /* 2 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            /**\r\n             * Ratio between font size and font height. The number comes from jspdf's source code\r\n             */\r\n            exports.FONT_ROW_RATIO = 1.15;\r\n            var state_1 = __webpack_require__(0);\r\n            function defaultConfig() {\r\n                return {\r\n                    // Html content\r\n                    html: null,\r\n                    // Custom content\r\n                    head: null,\r\n                    body: null,\r\n                    foot: null,\r\n                    // Properties\r\n                    includeHiddenHtml: false,\r\n                    startY: null,\r\n                    margin: 40 / state_1.default().scaleFactor(),\r\n                    pageBreak: 'auto',\r\n                    rowPageBreak: 'auto',\r\n                    tableWidth: 'auto',\r\n                    showHead: 'everyPage',\r\n                    showFoot: 'everyPage',\r\n                    tableLineWidth: 0,\r\n                    tableLineColor: 200,\r\n                    tableId: null,\r\n                    // Styling\r\n                    theme: 'striped',\r\n                    useCss: false,\r\n                    styles: {},\r\n                    headStyles: {},\r\n                    bodyStyles: {},\r\n                    footStyles: {},\r\n                    alternateRowStyles: {},\r\n                    columnStyles: {},\r\n                    // Hooks\r\n                    // Use to change the content of the cell before width calculations etc are performed\r\n                    didParseCell: function (data) {\r\n                    },\r\n                    willDrawCell: function (data) {\r\n                    },\r\n                    // Use to draw additional content such as images in table cells\r\n                    didDrawCell: function (data) {\r\n                    },\r\n                    // Use to draw additional content to each page such as headers and footers\r\n                    didDrawPage: function (data) {\r\n                    },\r\n                };\r\n            }\r\n            exports.defaultConfig = defaultConfig;\r\n            // Base style for all themes\r\n            function defaultStyles() {\r\n                return {\r\n                    font: \"helvetica\",\r\n                    fontStyle: 'normal',\r\n                    overflow: 'linebreak',\r\n                    fillColor: false,\r\n                    textColor: 20,\r\n                    halign: 'left',\r\n                    valign: 'top',\r\n                    fontSize: 10,\r\n                    cellPadding: 5 / state_1.default().scaleFactor(),\r\n                    lineColor: 200,\r\n                    lineWidth: 0 / state_1.default().scaleFactor(),\r\n                    cellWidth: 'auto',\r\n                    minCellHeight: 0\r\n                };\r\n            }\r\n            exports.defaultStyles = defaultStyles;\r\n            /**\r\n             * Styles for the themes (overriding the default styles)\r\n             */\r\n            function getTheme(name) {\r\n                var themes = {\r\n                    'striped': {\r\n                        table: { fillColor: 255, textColor: 80, fontStyle: 'normal' },\r\n                        head: { textColor: 255, fillColor: [41, 128, 185], fontStyle: 'bold' },\r\n                        body: {},\r\n                        foot: { textColor: 255, fillColor: [41, 128, 185], fontStyle: 'bold' },\r\n                        alternateRow: { fillColor: 245 }\r\n                    },\r\n                    'grid': {\r\n                        table: { fillColor: 255, textColor: 80, fontStyle: 'normal', lineWidth: 0.1 },\r\n                        head: { textColor: 255, fillColor: [26, 188, 156], fontStyle: 'bold', lineWidth: 0 },\r\n                        body: {},\r\n                        foot: { textColor: 255, fillColor: [26, 188, 156], fontStyle: 'bold', lineWidth: 0 },\r\n                        alternateRow: {}\r\n                    },\r\n                    'plain': {\r\n                        head: { fontStyle: 'bold' },\r\n                        foot: { fontStyle: 'bold' }\r\n                    }\r\n                };\r\n                return themes[name];\r\n            }\r\n            exports.getTheme = getTheme;\r\n            /***/ \r\n        }),\r\n        /* 3 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            /*\r\n             * Include common small polyfills instead of requiring the user to to do it\r\n             */\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n            function assign(target) {\r\n                'use strict';\r\n                var varArgs = [];\r\n                for (var _i = 1; _i < arguments.length; _i++) {\r\n                    varArgs[_i - 1] = arguments[_i];\r\n                }\r\n                if (target == null) { // TypeError if undefined or null\r\n                    throw new TypeError('Cannot convert undefined or null to object');\r\n                }\r\n                var to = Object(target);\r\n                for (var index = 1; index < arguments.length; index++) {\r\n                    var nextSource = arguments[index];\r\n                    if (nextSource != null) { // Skip over if undefined or null\r\n                        for (var nextKey in nextSource) {\r\n                            // Avoid bugs when hasOwnProperty is shadowed\r\n                            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n                                to[nextKey] = nextSource[nextKey];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return to;\r\n            }\r\n            exports.assign = assign;\r\n            /***/ \r\n        }),\r\n        /* 4 */\r\n        /***/ (function (module, exports) {\r\n            module.exports = __WEBPACK_EXTERNAL_MODULE__4__;\r\n            /***/ \r\n        }),\r\n        /* 5 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var tableDrawer_1 = __webpack_require__(6);\r\n            var widthCalculator_1 = __webpack_require__(7);\r\n            var inputParser_1 = __webpack_require__(8);\r\n            var state_1 = __webpack_require__(0);\r\n            __webpack_require__(15);\r\n            var common_1 = __webpack_require__(1);\r\n            var jsPDF = __webpack_require__(4);\r\n            jsPDF.API.autoTable = function () {\r\n                state_1.setupState(this);\r\n                // 1. Parse and unify user input\r\n                var table = inputParser_1.parseInput(arguments);\r\n                // 2. Calculate preliminary table, column, row and cell dimensions\r\n                widthCalculator_1.calculateWidths(table);\r\n                // 3. Output table to pdf\r\n                tableDrawer_1.drawTable(table);\r\n                table.finalY = table.cursor.y;\r\n                this.previousAutoTable = table;\r\n                this.lastAutoTable = table;\r\n                this.autoTable.previous = table; // Deprecated\r\n                common_1.applyUserStyles();\r\n                state_1.resetState();\r\n                return this;\r\n            };\r\n            // Assign false to enable `doc.lastAutoTable.finalY || 40` sugar;\r\n            jsPDF.API.lastAutoTable = false;\r\n            jsPDF.API.previousAutoTable = false; // deprecated in v3\r\n            jsPDF.API.autoTable.previous = false; // deprecated in v3\r\n            jsPDF.API.autoTableSetDefaults = function (defaults) {\r\n                state_1.setDefaults(defaults, this);\r\n                return this;\r\n            };\r\n            jsPDF.autoTableSetDefaults = function (defaults, doc) {\r\n                state_1.setDefaults(defaults, doc);\r\n                return this;\r\n            };\r\n            /**\r\n             * @Deprecated. Use html option instead doc.autoTable(html: '#table')\r\n             */\r\n            jsPDF.API.autoTableHtmlToJson = function (tableElem, includeHiddenElements) {\r\n                console.error(\"Use of deprecated function: autoTableHtmlToJson. Use html option instead.\");\r\n                includeHiddenElements = includeHiddenElements || false;\r\n                if (!tableElem || !(tableElem instanceof HTMLTableElement)) {\r\n                    console.error(\"A HTMLTableElement has to be sent to autoTableHtmlToJson\");\r\n                    return null;\r\n                }\r\n                var columns = {}, rows = [];\r\n                var header = tableElem.rows[0];\r\n                for (var i = 0; i < header.cells.length; i++) {\r\n                    var cell = header.cells[i];\r\n                    var style = window.getComputedStyle(cell);\r\n                    if (includeHiddenElements || style.display !== 'none') {\r\n                        columns[i] = cell;\r\n                    }\r\n                }\r\n                var _loop_1 = function (i) {\r\n                    var tableRow = tableElem.rows[i];\r\n                    var style = window.getComputedStyle(tableRow);\r\n                    if (includeHiddenElements || style.display !== 'none') {\r\n                        var rowData_1 = [];\r\n                        Object.keys(columns).forEach(function (key) {\r\n                            var cell = tableRow.cells[key];\r\n                            rowData_1.push(cell);\r\n                        });\r\n                        rows.push(rowData_1);\r\n                    }\r\n                };\r\n                for (var i = 1; i < tableElem.rows.length; i++) {\r\n                    _loop_1(i);\r\n                }\r\n                var values = Object.keys(columns).map(function (key) {\r\n                    return columns[key];\r\n                });\r\n                return { columns: values, rows: rows, data: rows };\r\n            };\r\n            /**\r\n             * @deprecated\r\n             */\r\n            jsPDF.API.autoTableEndPosY = function () {\r\n                console.error(\"Use of deprecated function: autoTableEndPosY. Use doc.previousAutoTable.finalY instead.\");\r\n                var prev = this.previousAutoTable;\r\n                if (prev.cursor && typeof prev.cursor.y === 'number') {\r\n                    return prev.cursor.y;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            };\r\n            /**\r\n             * @deprecated\r\n             */\r\n            jsPDF.API.autoTableAddPageContent = function (hook) {\r\n                console.error(\"Use of deprecated function: autoTableAddPageContent. Use jsPDF.autoTableSetDefaults({didDrawPage: () => {}}) instead.\");\r\n                if (!jsPDF.API.autoTable.globalDefaults) {\r\n                    jsPDF.API.autoTable.globalDefaults = {};\r\n                }\r\n                jsPDF.API.autoTable.globalDefaults.addPageContent = hook;\r\n                return this;\r\n            };\r\n            /**\r\n             * @deprecated\r\n             */\r\n            jsPDF.API.autoTableAddPage = function () {\r\n                console.error(\"Use of deprecated function: autoTableAddPage. Use doc.addPage()\");\r\n                this.addPage();\r\n                return this;\r\n            };\r\n            /***/ \r\n        }),\r\n        /* 6 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var config_1 = __webpack_require__(2);\r\n            var common_1 = __webpack_require__(1);\r\n            var state_1 = __webpack_require__(0);\r\n            function drawTable(table) {\r\n                var settings = table.settings;\r\n                table.cursor = {\r\n                    x: table.margin('left'),\r\n                    y: settings.startY == null ? table.margin('top') : settings.startY\r\n                };\r\n                var minTableBottomPos = settings.startY + table.margin('bottom') + table.headHeight + table.footHeight;\r\n                if (settings.pageBreak === 'avoid') {\r\n                    minTableBottomPos += table.height;\r\n                }\r\n                if (settings.pageBreak === 'always' || settings.startY != null && settings.startY !== false && minTableBottomPos > state_1.default().pageHeight()) {\r\n                    nextPage(state_1.default().doc);\r\n                    table.cursor.y = table.margin('top');\r\n                }\r\n                table.pageStartX = table.cursor.x;\r\n                table.pageStartY = table.cursor.y;\r\n                table.startPageNumber = state_1.default().pageNumber();\r\n                common_1.applyUserStyles();\r\n                if (settings.showHead === true || settings.showHead === 'firstPage' || settings.showHead === 'everyPage') {\r\n                    table.head.forEach(function (row) { return printRow(row); });\r\n                }\r\n                common_1.applyUserStyles();\r\n                table.body.forEach(function (row, index) {\r\n                    printFullRow(row, index === table.body.length - 1);\r\n                });\r\n                common_1.applyUserStyles();\r\n                if (settings.showFoot === true || settings.showFoot === 'lastPage' || settings.showFoot === 'everyPage') {\r\n                    table.foot.forEach(function (row) { return printRow(row); });\r\n                }\r\n                common_1.addTableBorder();\r\n                table.callEndPageHooks();\r\n            }\r\n            exports.drawTable = drawTable;\r\n            function printFullRow(row, isLastRow) {\r\n                var remainingRowHeight = 0;\r\n                var remainingTexts = {};\r\n                var table = state_1.default().table;\r\n                var remainingPageSpace = getRemainingPageSpace(isLastRow);\r\n                if (remainingPageSpace < row.maxCellHeight) {\r\n                    if (remainingPageSpace < getOneRowHeight(row) || (table.settings.rowPageBreak === 'avoid' && !rowHeightGreaterThanMaxTableHeight(row))) {\r\n                        addPage();\r\n                    }\r\n                    else {\r\n                        // Modify the row to fit the current page and calculate text and height of partial row\r\n                        row.spansMultiplePages = true;\r\n                        for (var j = 0; j < table.columns.length; j++) {\r\n                            var column = table.columns[j];\r\n                            var cell = row.cells[column.dataKey];\r\n                            if (!cell) {\r\n                                continue;\r\n                            }\r\n                            var fontHeight = cell.styles.fontSize / state_1.default().scaleFactor() * config_1.FONT_ROW_RATIO;\r\n                            var vPadding = cell.padding('vertical');\r\n                            var remainingLineCount = Math.floor((remainingPageSpace - vPadding) / fontHeight);\r\n                            // Note that this will cut cells with specified custom min height at page break\r\n                            if (Array.isArray(cell.text) && cell.text.length > remainingLineCount) {\r\n                                remainingTexts[column.dataKey] = cell.text.splice(remainingLineCount, cell.text.length);\r\n                                var rCellHeight = cell.height - remainingPageSpace;\r\n                                if (rCellHeight > remainingRowHeight) {\r\n                                    remainingRowHeight = rCellHeight;\r\n                                }\r\n                            }\r\n                            cell.height = remainingPageSpace;\r\n                        }\r\n                    }\r\n                }\r\n                printRow(row);\r\n                // Parts of the row is now printed. Time for adding a new page, prune \r\n                // the text and start over\r\n                if (Object.keys(remainingTexts).length > 0) {\r\n                    var maxCellHeight = 0;\r\n                    for (var j = 0; j < table.columns.length; j++) {\r\n                        var col = table.columns[j];\r\n                        var cell = row.cells[col.dataKey];\r\n                        if (!cell)\r\n                            continue;\r\n                        cell.height = remainingRowHeight;\r\n                        if (cell.height > maxCellHeight) {\r\n                            maxCellHeight = cell.height;\r\n                        }\r\n                        if (cell) {\r\n                            cell.text = remainingTexts[col.dataKey] || '';\r\n                        }\r\n                    }\r\n                    addPage();\r\n                    row.pageNumber++;\r\n                    row.height = remainingRowHeight;\r\n                    row.maxCellHeight = maxCellHeight;\r\n                    printFullRow(row, isLastRow);\r\n                }\r\n            }\r\n            function getOneRowHeight(row) {\r\n                return state_1.default().table.columns.reduce(function (acc, column) {\r\n                    var cell = row.cells[column.dataKey];\r\n                    if (!cell)\r\n                        return 0;\r\n                    var fontHeight = cell.styles.fontSize / state_1.default().scaleFactor() * config_1.FONT_ROW_RATIO;\r\n                    var vPadding = cell.padding('vertical');\r\n                    var oneRowHeight = vPadding + fontHeight;\r\n                    return oneRowHeight > acc ? oneRowHeight : acc;\r\n                }, 0);\r\n            }\r\n            function rowHeightGreaterThanMaxTableHeight(row) {\r\n                var table = state_1.default().table;\r\n                var pageHeight = state_1.default().pageHeight();\r\n                var maxTableHeight = pageHeight - table.margin('top') - table.margin('bottom');\r\n                return row.maxCellHeight > maxTableHeight;\r\n            }\r\n            function printRow(row) {\r\n                var table = state_1.default().table;\r\n                table.cursor.x = table.margin('left');\r\n                row.y = table.cursor.y;\r\n                row.x = table.cursor.x;\r\n                // For backwards compatibility reset those after addingRow event\r\n                table.cursor.x = table.margin('left');\r\n                row.y = table.cursor.y;\r\n                row.x = table.cursor.x;\r\n                for (var _i = 0, _a = table.columns; _i < _a.length; _i++) {\r\n                    var column = _a[_i];\r\n                    var cell = row.cells[column.dataKey];\r\n                    if (!cell) {\r\n                        table.cursor.x += column.width;\r\n                        continue;\r\n                    }\r\n                    common_1.applyStyles(cell.styles);\r\n                    cell.x = table.cursor.x;\r\n                    cell.y = row.y;\r\n                    if (cell.styles.valign === 'top') {\r\n                        cell.textPos.y = table.cursor.y + cell.padding('top');\r\n                    }\r\n                    else if (cell.styles.valign === 'bottom') {\r\n                        cell.textPos.y = table.cursor.y + cell.height - cell.padding('bottom');\r\n                    }\r\n                    else {\r\n                        cell.textPos.y = table.cursor.y + cell.height / 2;\r\n                    }\r\n                    if (cell.styles.halign === 'right') {\r\n                        cell.textPos.x = cell.x + cell.width - cell.padding('right');\r\n                    }\r\n                    else if (cell.styles.halign === 'center') {\r\n                        cell.textPos.x = cell.x + cell.width / 2;\r\n                    }\r\n                    else {\r\n                        cell.textPos.x = cell.x + cell.padding('left');\r\n                    }\r\n                    if (table.callCellHooks(table.cellHooks.willDrawCell, cell, row, column) === false) {\r\n                        table.cursor.x += column.width;\r\n                        continue;\r\n                    }\r\n                    var fillStyle = common_1.getFillStyle(cell.styles);\r\n                    if (fillStyle) {\r\n                        state_1.default().doc.rect(cell.x, table.cursor.y, cell.width, cell.height, fillStyle);\r\n                    }\r\n                    state_1.default().doc.autoTableText(cell.text, cell.textPos.x, cell.textPos.y, {\r\n                        halign: cell.styles.halign,\r\n                        valign: cell.styles.valign,\r\n                        maxWidth: cell.width - cell.padding('left') - cell.padding('right')\r\n                    });\r\n                    table.callCellHooks(table.cellHooks.didDrawCell, cell, row, column);\r\n                    table.cursor.x += column.width;\r\n                }\r\n                table.cursor.y += row.height;\r\n            }\r\n            function getRemainingPageSpace(isLastRow) {\r\n                var table = state_1.default().table;\r\n                var bottomContentHeight = table.margin('bottom');\r\n                var showFoot = table.settings.showFoot;\r\n                if (showFoot === true || showFoot === 'everyPage' || (showFoot === 'lastPage' && isLastRow)) {\r\n                    bottomContentHeight += table.footHeight;\r\n                }\r\n                return state_1.default().pageHeight() - table.cursor.y - bottomContentHeight;\r\n            }\r\n            function addPage() {\r\n                var table = state_1.default().table;\r\n                common_1.applyUserStyles();\r\n                if (table.settings.showFoot === true || table.settings.showFoot === 'everyPage') {\r\n                    table.foot.forEach(function (row) { return printRow(row); });\r\n                }\r\n                table.finalY = table.cursor.y;\r\n                // Add user content just before adding new page ensure it will \r\n                // be drawn above other things on the page\r\n                table.callEndPageHooks();\r\n                common_1.addTableBorder();\r\n                nextPage(state_1.default().doc);\r\n                table.pageNumber++;\r\n                table.cursor = { x: table.margin('left'), y: table.margin('top') };\r\n                table.pageStartX = table.cursor.x;\r\n                table.pageStartY = table.cursor.y;\r\n                if (table.settings.showHead === true || table.settings.showHead === 'everyPage') {\r\n                    table.head.forEach(function (row) { return printRow(row); });\r\n                }\r\n            }\r\n            exports.addPage = addPage;\r\n            function nextPage(doc) {\r\n                var current = state_1.default().pageNumber();\r\n                doc.setPage(current + 1);\r\n                var newCurrent = state_1.default().pageNumber();\r\n                if (newCurrent === current) {\r\n                    doc.addPage();\r\n                }\r\n            }\r\n            /***/ \r\n        }),\r\n        /* 7 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var config_1 = __webpack_require__(2);\r\n            var common_1 = __webpack_require__(1);\r\n            var state_1 = __webpack_require__(0);\r\n            /**\r\n             * Calculate the column widths\r\n             */\r\n            function calculateWidths(table) {\r\n                // TODO Handle these cases\r\n                var columnMinWidth = 10 / state_1.default().scaleFactor();\r\n                if (columnMinWidth * table.columns.length > table.width) {\r\n                    console.error('Columns could not fit on page');\r\n                }\r\n                else if (table.minWidth > table.width) {\r\n                    console.error(\"Column widths to wide and can't fit page\");\r\n                }\r\n                var copy = table.columns.slice(0);\r\n                var diffWidth = table.width - table.wrappedWidth;\r\n                distributeWidth(copy, diffWidth, table.wrappedWidth);\r\n                applyColSpans(table);\r\n                fitContent(table);\r\n                applyRowSpans(table);\r\n            }\r\n            exports.calculateWidths = calculateWidths;\r\n            function applyRowSpans(table) {\r\n                var rowSpanCells = {};\r\n                var colRowSpansLeft = 1;\r\n                var all = table.allRows();\r\n                for (var rowIndex = 0; rowIndex < all.length; rowIndex++) {\r\n                    var row = all[rowIndex];\r\n                    for (var _i = 0, _a = table.columns; _i < _a.length; _i++) {\r\n                        var column = _a[_i];\r\n                        var data = rowSpanCells[column.dataKey];\r\n                        if (colRowSpansLeft > 1) {\r\n                            colRowSpansLeft--;\r\n                            delete row.cells[column.dataKey];\r\n                        }\r\n                        else if (data) {\r\n                            data.cell.height += row.height;\r\n                            if (data.cell.height > row.maxCellHeight) {\r\n                                data.row.maxCellHeight = data.cell.height;\r\n                                data.row.maxCellLineCount = Array.isArray(data.cell.text) ? data.cell.text.length : 1;\r\n                            }\r\n                            colRowSpansLeft = data.cell.colSpan;\r\n                            delete row.cells[column.dataKey];\r\n                            data.left--;\r\n                            if (data.left <= 1) {\r\n                                delete rowSpanCells[column.dataKey];\r\n                            }\r\n                        }\r\n                        else {\r\n                            var cell = row.cells[column.dataKey];\r\n                            if (!cell) {\r\n                                continue;\r\n                            }\r\n                            cell.height = row.height;\r\n                            if (cell.rowSpan > 1) {\r\n                                var remaining = all.length - rowIndex;\r\n                                var left = cell.rowSpan > remaining ? remaining : cell.rowSpan;\r\n                                rowSpanCells[column.dataKey] = { cell: cell, left: left, row: row };\r\n                            }\r\n                        }\r\n                    }\r\n                    if (row.section === 'head') {\r\n                        table.headHeight += row.maxCellHeight;\r\n                    }\r\n                    if (row.section === 'foot') {\r\n                        table.footHeight += row.maxCellHeight;\r\n                    }\r\n                    table.height += row.height;\r\n                }\r\n            }\r\n            function applyColSpans(table) {\r\n                var all = table.allRows();\r\n                for (var rowIndex = 0; rowIndex < all.length; rowIndex++) {\r\n                    var row = all[rowIndex];\r\n                    var colSpanCell = null;\r\n                    var combinedColSpanWidth = 0;\r\n                    var colSpansLeft = 0;\r\n                    for (var columnIndex = 0; columnIndex < table.columns.length; columnIndex++) {\r\n                        var column = table.columns[columnIndex];\r\n                        var cell = null;\r\n                        // Width and colspan\r\n                        colSpansLeft -= 1;\r\n                        if (colSpansLeft > 1 && table.columns[columnIndex + 1]) {\r\n                            combinedColSpanWidth += column.width;\r\n                            delete row.cells[column.dataKey];\r\n                            continue;\r\n                        }\r\n                        else if (colSpanCell) {\r\n                            cell = colSpanCell;\r\n                            delete row.cells[column.dataKey];\r\n                            colSpanCell = null;\r\n                        }\r\n                        else {\r\n                            cell = row.cells[column.dataKey];\r\n                            if (!cell)\r\n                                continue;\r\n                            colSpansLeft = cell.colSpan;\r\n                            combinedColSpanWidth = 0;\r\n                            if (cell.colSpan > 1) {\r\n                                colSpanCell = cell;\r\n                                combinedColSpanWidth += column.width;\r\n                                continue;\r\n                            }\r\n                        }\r\n                        cell.width = column.width + combinedColSpanWidth;\r\n                    }\r\n                }\r\n            }\r\n            function fitContent(table) {\r\n                var rowSpanHeight = { count: 0, height: 0 };\r\n                for (var _i = 0, _a = table.allRows(); _i < _a.length; _i++) {\r\n                    var row = _a[_i];\r\n                    for (var _b = 0, _c = table.columns; _b < _c.length; _b++) {\r\n                        var column = _c[_b];\r\n                        var cell = row.cells[column.dataKey];\r\n                        if (!cell)\r\n                            continue;\r\n                        common_1.applyStyles(cell.styles);\r\n                        var textSpace = cell.width - cell.padding('horizontal');\r\n                        if (cell.styles.overflow === 'linebreak') {\r\n                            // Add one pt to textSpace to fix rounding error\r\n                            cell.text = state_1.default().doc.splitTextToSize(cell.text, textSpace + 1 / (state_1.default().scaleFactor() || 1), { fontSize: cell.styles.fontSize });\r\n                        }\r\n                        else if (cell.styles.overflow === 'ellipsize') {\r\n                            cell.text = common_1.ellipsize(cell.text, textSpace, cell.styles);\r\n                        }\r\n                        else if (cell.styles.overflow === 'hidden') {\r\n                            cell.text = common_1.ellipsize(cell.text, textSpace, cell.styles, '');\r\n                        }\r\n                        else if (typeof cell.styles.overflow === 'function') {\r\n                            cell.text = cell.styles.overflow(cell.text, textSpace);\r\n                        }\r\n                        var lineCount = Array.isArray(cell.text) ? cell.text.length : 1;\r\n                        var fontHeight = cell.styles.fontSize / state_1.default().scaleFactor() * config_1.FONT_ROW_RATIO;\r\n                        cell.contentHeight = lineCount * fontHeight + cell.padding('vertical');\r\n                        if (cell.styles.minCellHeight > cell.contentHeight) {\r\n                            cell.contentHeight = cell.styles.minCellHeight;\r\n                        }\r\n                        var realContentHeight = cell.contentHeight / cell.rowSpan;\r\n                        if (cell.rowSpan > 1 && (rowSpanHeight.count * rowSpanHeight.height < realContentHeight * cell.rowSpan)) {\r\n                            rowSpanHeight = { height: realContentHeight, count: cell.rowSpan };\r\n                        }\r\n                        else if (rowSpanHeight && rowSpanHeight.count > 0) {\r\n                            if (rowSpanHeight.height > realContentHeight) {\r\n                                realContentHeight = rowSpanHeight.height;\r\n                            }\r\n                        }\r\n                        if (realContentHeight > row.height) {\r\n                            row.height = realContentHeight;\r\n                            row.maxCellHeight = realContentHeight;\r\n                            row.maxCellLineCount = lineCount;\r\n                        }\r\n                    }\r\n                    rowSpanHeight.count--;\r\n                }\r\n            }\r\n            function distributeWidth(autoColumns, diffWidth, wrappedAutoColumnsWidth) {\r\n                for (var i = 0; i < autoColumns.length; i++) {\r\n                    var column = autoColumns[i];\r\n                    var ratio = column.wrappedWidth / wrappedAutoColumnsWidth;\r\n                    var suggestedChange = diffWidth * ratio;\r\n                    var suggestedWidth = column.wrappedWidth + suggestedChange;\r\n                    if (suggestedWidth >= column.minWidth) {\r\n                        column.width = suggestedWidth;\r\n                    }\r\n                    else {\r\n                        // We can't reduce the width of this column. Mark as none auto column and start over\r\n                        // Add 1 to minWidth as linebreaks calc otherwise sometimes made two rows\r\n                        column.width = column.minWidth + 1 / state_1.default().scaleFactor();\r\n                        wrappedAutoColumnsWidth -= column.wrappedWidth;\r\n                        autoColumns.splice(i, 1);\r\n                        distributeWidth(autoColumns, diffWidth, wrappedAutoColumnsWidth);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            /***/ \r\n        }),\r\n        /* 8 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            var __assign = (this && this.__assign) || function () {\r\n                __assign = Object.assign || function (t) {\r\n                    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                        s = arguments[i];\r\n                        for (var p in s)\r\n                            if (Object.prototype.hasOwnProperty.call(s, p))\r\n                                t[p] = s[p];\r\n                    }\r\n                    return t;\r\n                };\r\n                return __assign.apply(this, arguments);\r\n            };\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var models_1 = __webpack_require__(9);\r\n            var config_1 = __webpack_require__(2);\r\n            var htmlParser_1 = __webpack_require__(12);\r\n            var polyfills_1 = __webpack_require__(3);\r\n            var common_1 = __webpack_require__(1);\r\n            var state_1 = __webpack_require__(0);\r\n            var inputValidator_1 = __webpack_require__(14);\r\n            /**\r\n             * Create models from the user input\r\n             */\r\n            function parseInput(args) {\r\n                var tableOptions = parseUserArguments(args);\r\n                var globalOptions = state_1.getGlobalOptions();\r\n                var documentOptions = state_1.getDocumentOptions();\r\n                var allOptions = [globalOptions, documentOptions, tableOptions];\r\n                inputValidator_1.default(allOptions);\r\n                var table = new models_1.Table();\r\n                state_1.default().table = table;\r\n                table.id = tableOptions.tableId;\r\n                var doc = state_1.default().doc;\r\n                table.userStyles = {\r\n                    // Setting to black for versions of jspdf without getTextColor\r\n                    textColor: doc.getTextColor ? doc.getTextColor() : 0,\r\n                    fontSize: doc.internal.getFontSize(),\r\n                    fontStyle: doc.internal.getFont().fontStyle,\r\n                    font: doc.internal.getFont().fontName\r\n                };\r\n                var _loop_1 = function (styleProp) {\r\n                    var styles = allOptions.map(function (opts) { return opts[styleProp] || {}; });\r\n                    table.styles[styleProp] = polyfills_1.assign.apply(void 0, [{}].concat(styles));\r\n                };\r\n                // Merge styles one level deeper\r\n                for (var _i = 0, _a = Object.keys(table.styles); _i < _a.length; _i++) {\r\n                    var styleProp = _a[_i];\r\n                    _loop_1(styleProp);\r\n                }\r\n                // Append hooks\r\n                for (var _b = 0, allOptions_1 = allOptions; _b < allOptions_1.length; _b++) {\r\n                    var opts = allOptions_1[_b];\r\n                    for (var _c = 0, _d = Object.keys(table.cellHooks); _c < _d.length; _c++) {\r\n                        var hookName = _d[_c];\r\n                        if (opts && typeof opts[hookName] === 'function') {\r\n                            table.cellHooks[hookName].push(opts[hookName]);\r\n                            delete opts[hookName];\r\n                        }\r\n                    }\r\n                }\r\n                table.settings = polyfills_1.assign.apply(void 0, [{}, config_1.defaultConfig()].concat(allOptions));\r\n                table.settings.margin = common_1.marginOrPadding(table.settings.margin, config_1.defaultConfig().margin);\r\n                if (table.settings.theme === 'auto') {\r\n                    table.settings.theme = table.settings.useCss ? 'plain' : 'striped';\r\n                }\r\n                if (table.settings.startY === false) {\r\n                    delete table.settings.startY;\r\n                }\r\n                var previous = state_1.default().doc.previousAutoTable;\r\n                var isSamePageAsPrevious = previous && previous.startPageNumber + previous.pageNumber - 1 === state_1.default().pageNumber();\r\n                if (table.settings.startY == null && isSamePageAsPrevious) {\r\n                    table.settings.startY = previous.finalY + 20 / state_1.default().scaleFactor();\r\n                }\r\n                var htmlContent = {};\r\n                if (table.settings.html) {\r\n                    htmlContent = htmlParser_1.parseHtml(table.settings.html, table.settings.includeHiddenHtml, table.settings.useCss) || {};\r\n                }\r\n                table.settings.head = htmlContent.head || table.settings.head || [];\r\n                table.settings.body = htmlContent.body || table.settings.body || [];\r\n                table.settings.foot = htmlContent.foot || table.settings.foot || [];\r\n                parseContent(table);\r\n                table.minWidth = table.columns.reduce(function (total, col) { return (total + col.minWidth); }, 0);\r\n                table.wrappedWidth = table.columns.reduce(function (total, col) { return (total + col.wrappedWidth); }, 0);\r\n                if (typeof table.settings.tableWidth === 'number') {\r\n                    table.width = table.settings.tableWidth;\r\n                }\r\n                else if (table.settings.tableWidth === 'wrap') {\r\n                    table.width = table.wrappedWidth;\r\n                }\r\n                else {\r\n                    table.width = state_1.default().pageWidth() - table.margin('left') - table.margin('right');\r\n                }\r\n                return table;\r\n            }\r\n            exports.parseInput = parseInput;\r\n            function parseUserArguments(args) {\r\n                // Normal initialization on format doc.autoTable(options)\r\n                if (args.length === 1) {\r\n                    return args[0];\r\n                }\r\n                else {\r\n                    // Deprecated initialization on format doc.autoTable(columns, body, [options])\r\n                    var opts = args[2] || {};\r\n                    opts.body = args[1];\r\n                    opts.columns = args[0];\r\n                    // Support v2 title prop in v3\r\n                    opts.columns.forEach(function (col) {\r\n                        if (col.header == null) {\r\n                            col.header = col.title;\r\n                        }\r\n                    });\r\n                    return opts;\r\n                }\r\n            }\r\n            function parseContent(table) {\r\n                var settings = table.settings;\r\n                table.columns = getTableColumns(settings);\r\n                var _loop_2 = function (sectionName) {\r\n                    var rowSpansLeftForColumn = {};\r\n                    var sectionRows = settings[sectionName];\r\n                    if (sectionRows.length === 0 && settings.columns) {\r\n                        var sectionRow_1 = {};\r\n                        table.columns\r\n                            .forEach(function (col) {\r\n                            var columnData = col.raw;\r\n                            if (sectionName === 'head') {\r\n                                var val = typeof columnData === 'object' ? columnData.header : columnData;\r\n                                if (val) {\r\n                                    sectionRow_1[col.dataKey] = val;\r\n                                }\r\n                            }\r\n                            else if (sectionName === 'foot' && columnData.footer) {\r\n                                sectionRow_1[col.dataKey] = columnData.footer;\r\n                            }\r\n                        });\r\n                        if (Object.keys(sectionRow_1).length) {\r\n                            sectionRows.push(sectionRow_1);\r\n                        }\r\n                    }\r\n                    sectionRows.forEach(function (rawRow, rowIndex) {\r\n                        var skippedRowForRowSpans = 0;\r\n                        var row = new models_1.Row(rawRow, rowIndex, sectionName);\r\n                        table[sectionName].push(row);\r\n                        var colSpansAdded = 0;\r\n                        var columnSpansLeft = 0;\r\n                        for (var _i = 0, _a = table.columns; _i < _a.length; _i++) {\r\n                            var column = _a[_i];\r\n                            if (rowSpansLeftForColumn[column.dataKey] == null || rowSpansLeftForColumn[column.dataKey].left === 0) {\r\n                                if (columnSpansLeft === 0) {\r\n                                    var rawCell = void 0;\r\n                                    if (Array.isArray(rawRow)) {\r\n                                        rawCell = rawRow[column.dataKey - colSpansAdded - skippedRowForRowSpans];\r\n                                    }\r\n                                    else {\r\n                                        rawCell = rawRow[column.dataKey];\r\n                                    }\r\n                                    var styles = cellStyles(sectionName, column.dataKey, rowIndex);\r\n                                    var cell = new models_1.Cell(rawCell, styles, sectionName);\r\n                                    row.cells[column.dataKey] = cell;\r\n                                    table.callCellHooks(table.cellHooks.didParseCell, cell, row, column);\r\n                                    columnSpansLeft = cell.colSpan - 1;\r\n                                    rowSpansLeftForColumn[column.dataKey] = { left: cell.rowSpan - 1, times: columnSpansLeft };\r\n                                }\r\n                                else {\r\n                                    columnSpansLeft--;\r\n                                    colSpansAdded++;\r\n                                }\r\n                            }\r\n                            else {\r\n                                rowSpansLeftForColumn[column.dataKey].left--;\r\n                                columnSpansLeft = rowSpansLeftForColumn[column.dataKey].times;\r\n                                skippedRowForRowSpans++;\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n                for (var _i = 0, _a = ['head', 'body', 'foot']; _i < _a.length; _i++) {\r\n                    var sectionName = _a[_i];\r\n                    _loop_2(sectionName);\r\n                }\r\n                table.allRows().forEach(function (row) {\r\n                    for (var _i = 0, _a = table.columns; _i < _a.length; _i++) {\r\n                        var column = _a[_i];\r\n                        var cell = row.cells[column.dataKey];\r\n                        // Kind of make sense to not consider width of cells with colspan columns\r\n                        // Consider this in a future release however\r\n                        if (cell && cell.colSpan === 1) {\r\n                            if (cell.wrappedWidth > column.wrappedWidth) {\r\n                                column.wrappedWidth = cell.wrappedWidth;\r\n                            }\r\n                            if (cell.minWidth > column.minWidth) {\r\n                                column.minWidth = cell.minWidth;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            function getTableColumns(settings) {\r\n                if (settings.columns) {\r\n                    return settings.columns.map(function (input, index) {\r\n                        var key = input.dataKey || input.key || index;\r\n                        var raw = input != null ? input : index;\r\n                        return new models_1.Column(key, raw, index);\r\n                    });\r\n                }\r\n                else {\r\n                    var merged = __assign({}, settings.head[0], settings.body[0], settings.foot[0]);\r\n                    delete merged._element;\r\n                    var dataKeys = Object.keys(merged);\r\n                    return dataKeys.map(function (key) { return new models_1.Column(key, key, key); });\r\n                }\r\n            }\r\n            function cellStyles(sectionName, dataKey, rowIndex) {\r\n                var table = state_1.default().table;\r\n                var theme = config_1.getTheme(table.settings.theme);\r\n                var otherStyles = [theme.table, theme[sectionName], table.styles.styles, table.styles[sectionName + \"Styles\"]];\r\n                var colStyles = sectionName === 'body' ? table.styles.columnStyles[dataKey] || {} : {};\r\n                var rowStyles = sectionName === 'body' && rowIndex % 2 === 0 ? polyfills_1.assign({}, theme.alternateRow, table.styles.alternateRowStyles) : {};\r\n                return polyfills_1.assign.apply(void 0, [config_1.defaultStyles()].concat(otherStyles.concat([rowStyles, colStyles])));\r\n            }\r\n            /***/ \r\n        }),\r\n        /* 9 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var config_1 = __webpack_require__(2);\r\n            var state_1 = __webpack_require__(0);\r\n            var HookData_1 = __webpack_require__(10);\r\n            var common_1 = __webpack_require__(1);\r\n            var assign = __webpack_require__(11);\r\n            var CellHooks = /** @class */ /*@__PURE__*/ (function () {\r\n                function CellHooks() {\r\n                    this.willParseCell = [];\r\n                    this.didParseCell = [];\r\n                    this.willDrawCell = [];\r\n                    this.didDrawCell = [];\r\n                    this.didDrawPage = [];\r\n                }\r\n                return CellHooks;\r\n            }());\r\n            var Table = /** @class */ /*@__PURE__*/ (function () {\r\n                function Table() {\r\n                    this.columns = [];\r\n                    this.head = [];\r\n                    this.body = [];\r\n                    this.foot = [];\r\n                    this.height = 0;\r\n                    this.width = 0;\r\n                    this.preferredWidth = 0;\r\n                    this.wrappedWidth = 0;\r\n                    this.minWidth = 0;\r\n                    this.headHeight = 0;\r\n                    this.footHeight = 0;\r\n                    this.startPageNumber = 1;\r\n                    this.pageNumber = 1;\r\n                    this.styles = {\r\n                        styles: {},\r\n                        headStyles: {},\r\n                        bodyStyles: {},\r\n                        footStyles: {},\r\n                        alternateRowStyles: {},\r\n                        columnStyles: {},\r\n                    };\r\n                    this.cellHooks = new CellHooks();\r\n                }\r\n                Object.defineProperty(Table.prototype, \"pageCount\", {\r\n                    get: function () {\r\n                        return this.pageNumber;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n                Table.prototype.allRows = function () {\r\n                    return this.head.concat(this.body).concat(this.foot);\r\n                };\r\n                Table.prototype.callCellHooks = function (handlers, cell, row, column) {\r\n                    for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {\r\n                        var handler = handlers_1[_i];\r\n                        if (handler(new HookData_1.CellHookData(cell, row, column)) === false) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                };\r\n                Table.prototype.callEndPageHooks = function () {\r\n                    common_1.applyUserStyles();\r\n                    for (var _i = 0, _a = this.cellHooks.didDrawPage; _i < _a.length; _i++) {\r\n                        var handler = _a[_i];\r\n                        handler(new HookData_1.HookData());\r\n                    }\r\n                };\r\n                Table.prototype.margin = function (side) {\r\n                    return common_1.marginOrPadding(this.settings.margin, config_1.defaultConfig().margin)[side];\r\n                };\r\n                return Table;\r\n            }());\r\n            exports.Table = Table;\r\n            var Row = /** @class */ /*@__PURE__*/ (function () {\r\n                function Row(raw, index, section) {\r\n                    this.cells = {};\r\n                    this.height = 0;\r\n                    this.maxCellLineCount = 1;\r\n                    this.maxCellHeight = 0;\r\n                    this.pageNumber = 1;\r\n                    this.spansMultiplePages = false;\r\n                    this.raw = raw;\r\n                    if (raw._element) {\r\n                        this.raw = raw._element;\r\n                    }\r\n                    this.index = index;\r\n                    this.section = section;\r\n                }\r\n                Object.defineProperty(Row.prototype, \"pageCount\", {\r\n                    get: function () {\r\n                        return this.pageNumber;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n                return Row;\r\n            }());\r\n            exports.Row = Row;\r\n            var Cell = /** @class */ /*@__PURE__*/ (function () {\r\n                function Cell(raw, themeStyles, section) {\r\n                    this.contentWidth = 0;\r\n                    this.wrappedWidth = 0;\r\n                    this.minWidth = 0;\r\n                    this.textPos = {};\r\n                    this.height = 0;\r\n                    this.width = 0;\r\n                    this.rowSpan = raw && raw.rowSpan || 1;\r\n                    this.colSpan = raw && raw.colSpan || 1;\r\n                    this.styles = assign(themeStyles, raw && raw.styles || {});\r\n                    this.section = section;\r\n                    var text = '';\r\n                    var content = raw && typeof raw.content !== 'undefined' ? raw.content : raw;\r\n                    content = content != undefined && content.dataKey != undefined ? content.title : content;\r\n                    var fromHtml = typeof window === 'object' && window.HTMLElement && content instanceof window.HTMLElement;\r\n                    this.raw = fromHtml ? content : raw;\r\n                    if (content && fromHtml) {\r\n                        text = (content.innerText || '').replace(/' '+/g, ' ').trim();\r\n                    }\r\n                    else {\r\n                        // Stringify 0 and false, but not undefined or null\r\n                        text = content != undefined ? '' + content : '';\r\n                    }\r\n                    var splitRegex = /\\r\\n|\\r|\\n/g;\r\n                    this.text = text.split(splitRegex);\r\n                    this.contentWidth = this.padding('horizontal') + common_1.getStringWidth(this.text, this.styles);\r\n                    if (typeof this.styles.cellWidth === 'number') {\r\n                        this.minWidth = this.styles.cellWidth;\r\n                        this.wrappedWidth = this.styles.cellWidth;\r\n                    }\r\n                    else if (this.styles.cellWidth === 'wrap') {\r\n                        this.minWidth = this.contentWidth;\r\n                        this.wrappedWidth = this.contentWidth;\r\n                    }\r\n                    else { // auto\r\n                        var defaultMinWidth = 10 / state_1.default().scaleFactor();\r\n                        this.minWidth = this.styles.minCellWidth || defaultMinWidth;\r\n                        this.wrappedWidth = this.contentWidth;\r\n                        if (this.minWidth > this.wrappedWidth) {\r\n                            this.wrappedWidth = this.minWidth;\r\n                        }\r\n                    }\r\n                }\r\n                Cell.prototype.padding = function (name) {\r\n                    var padding = common_1.marginOrPadding(this.styles.cellPadding, common_1.styles([]).cellPadding);\r\n                    if (name === 'vertical') {\r\n                        return padding.top + padding.bottom;\r\n                    }\r\n                    else if (name === 'horizontal') {\r\n                        return padding.left + padding.right;\r\n                    }\r\n                    else {\r\n                        return padding[name];\r\n                    }\r\n                };\r\n                return Cell;\r\n            }());\r\n            exports.Cell = Cell;\r\n            var Column = /** @class */ /*@__PURE__*/ (function () {\r\n                function Column(dataKey, raw, index) {\r\n                    this.preferredWidth = 0;\r\n                    this.minWidth = 0;\r\n                    this.wrappedWidth = 0;\r\n                    this.width = 0;\r\n                    this.dataKey = dataKey;\r\n                    this.raw = raw;\r\n                    this.index = index;\r\n                }\r\n                return Column;\r\n            }());\r\n            exports.Column = Column;\r\n            /***/ \r\n        }),\r\n        /* 10 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            var __extends = (this && this.__extends) || (function () {\r\n                var extendStatics = function (d, b) {\r\n                    extendStatics = Object.setPrototypeOf ||\r\n                        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n                        function (d, b) { for (var p in b)\r\n                            if (b.hasOwnProperty(p))\r\n                                d[p] = b[p]; };\r\n                    return extendStatics(d, b);\r\n                };\r\n                return function (d, b) {\r\n                    extendStatics(d, b);\r\n                    function __() { this.constructor = d; }\r\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n                };\r\n            })();\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var state_1 = __webpack_require__(0);\r\n            var HookData = /** @class */ /*@__PURE__*/ (function () {\r\n                function HookData() {\r\n                    var table = state_1.default().table;\r\n                    this.table = table;\r\n                    this.pageNumber = table.pageNumber;\r\n                    this.settings = table.settings;\r\n                    this.cursor = table.cursor;\r\n                    this.doc = state_1.default().doc;\r\n                }\r\n                Object.defineProperty(HookData.prototype, \"pageCount\", {\r\n                    get: function () {\r\n                        return this.pageNumber;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n                return HookData;\r\n            }());\r\n            exports.HookData = HookData;\r\n            var CellHookData = /** @class */ /*@__PURE__*/ (function (_super) {\r\n                __extends(CellHookData, _super);\r\n                function CellHookData(cell, row, column) {\r\n                    var _this = _super.call(this) || this;\r\n                    _this.cell = cell;\r\n                    _this.row = row;\r\n                    _this.column = column;\r\n                    _this.section = row.section;\r\n                    return _this;\r\n                }\r\n                return CellHookData;\r\n            }(HookData));\r\n            exports.CellHookData = CellHookData;\r\n            /***/ \r\n        }),\r\n        /* 11 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            /*\r\n            object-assign\r\n            (c) Sindre Sorhus\r\n            @license MIT\r\n            */\r\n            /* eslint-disable no-unused-vars */\r\n            var getOwnPropertySymbols = Object.getOwnPropertySymbols;\r\n            var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n            var propIsEnumerable = Object.prototype.propertyIsEnumerable;\r\n            function toObject(val) {\r\n                if (val === null || val === undefined) {\r\n                    throw new TypeError('Object.assign cannot be called with null or undefined');\r\n                }\r\n                return Object(val);\r\n            }\r\n            function shouldUseNative() {\r\n                try {\r\n                    if (!Object.assign) {\r\n                        return false;\r\n                    }\r\n                    // Detect buggy property enumeration order in older V8 versions.\r\n                    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\r\n                    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\r\n                    test1[5] = 'de';\r\n                    if (Object.getOwnPropertyNames(test1)[0] === '5') {\r\n                        return false;\r\n                    }\r\n                    // https://bugs.chromium.org/p/v8/issues/detail?id=3056\r\n                    var test2 = {};\r\n                    for (var i = 0; i < 10; i++) {\r\n                        test2['_' + String.fromCharCode(i)] = i;\r\n                    }\r\n                    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\r\n                        return test2[n];\r\n                    });\r\n                    if (order2.join('') !== '0123456789') {\r\n                        return false;\r\n                    }\r\n                    // https://bugs.chromium.org/p/v8/issues/detail?id=3056\r\n                    var test3 = {};\r\n                    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\r\n                        test3[letter] = letter;\r\n                    });\r\n                    if (Object.keys(Object.assign({}, test3)).join('') !==\r\n                        'abcdefghijklmnopqrst') {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                catch (err) {\r\n                    // We don't expect any of the above to throw, but better to be safe.\r\n                    return false;\r\n                }\r\n            }\r\n            module.exports = shouldUseNative() ? Object.assign : function (target, source) {\r\n                var from;\r\n                var to = toObject(target);\r\n                var symbols;\r\n                for (var s = 1; s < arguments.length; s++) {\r\n                    from = Object(arguments[s]);\r\n                    for (var key in from) {\r\n                        if (hasOwnProperty.call(from, key)) {\r\n                            to[key] = from[key];\r\n                        }\r\n                    }\r\n                    if (getOwnPropertySymbols) {\r\n                        symbols = getOwnPropertySymbols(from);\r\n                        for (var i = 0; i < symbols.length; i++) {\r\n                            if (propIsEnumerable.call(from, symbols[i])) {\r\n                                to[symbols[i]] = from[symbols[i]];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return to;\r\n            };\r\n            /***/ \r\n        }),\r\n        /* 12 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var cssParser_1 = __webpack_require__(13);\r\n            var state_1 = __webpack_require__(0);\r\n            function parseHtml(input, includeHiddenHtml, useCss) {\r\n                if (includeHiddenHtml === void 0) {\r\n                    includeHiddenHtml = false;\r\n                }\r\n                if (useCss === void 0) {\r\n                    useCss = false;\r\n                }\r\n                var tableElement;\r\n                if (typeof input === 'string') {\r\n                    tableElement = window.document.querySelector(input);\r\n                }\r\n                else {\r\n                    tableElement = input;\r\n                }\r\n                if (!tableElement) {\r\n                    console.error(\"Html table could not be found with input: \", input);\r\n                    return;\r\n                }\r\n                var head = parseTableSection(window, tableElement.tHead, includeHiddenHtml, useCss);\r\n                var body = [];\r\n                for (var i = 0; i < tableElement.tBodies.length; i++) {\r\n                    body = body.concat(parseTableSection(window, tableElement.tBodies[i], includeHiddenHtml, useCss));\r\n                }\r\n                var foot = parseTableSection(window, tableElement.tFoot, includeHiddenHtml, useCss);\r\n                return { head: head, body: body, foot: foot };\r\n            }\r\n            exports.parseHtml = parseHtml;\r\n            function parseTableSection(window, sectionElement, includeHidden, useCss) {\r\n                var results = [];\r\n                if (!sectionElement) {\r\n                    return results;\r\n                }\r\n                for (var i = 0; i < sectionElement.rows.length; i++) {\r\n                    var row = sectionElement.rows[i];\r\n                    var resultRow = [];\r\n                    var rowStyles = useCss ? cssParser_1.parseCss(row, state_1.default().scaleFactor(), ['cellPadding', 'lineWidth', 'lineColor']) : {};\r\n                    for (var i_1 = 0; i_1 < row.cells.length; i_1++) {\r\n                        var cell = row.cells[i_1];\r\n                        var style = window.getComputedStyle(cell);\r\n                        if (includeHidden || style.display !== 'none') {\r\n                            var cellStyles = useCss ? cssParser_1.parseCss(cell, state_1.default().scaleFactor()) : {};\r\n                            resultRow.push({\r\n                                rowSpan: cell.rowSpan,\r\n                                colSpan: cell.colSpan,\r\n                                styles: useCss ? cellStyles : null,\r\n                                content: cell\r\n                            });\r\n                        }\r\n                    }\r\n                    if (resultRow.length > 0 && (includeHidden || rowStyles.display !== 'none')) {\r\n                        resultRow._element = row;\r\n                        results.push(resultRow);\r\n                    }\r\n                }\r\n                return results;\r\n            }\r\n            /***/ \r\n        }),\r\n        /* 13 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            // Limitations\r\n            // - No support for border spacing\r\n            // - No support for transparency\r\n            var common_1 = __webpack_require__(1);\r\n            function parseCss(element, scaleFactor, ignored) {\r\n                if (ignored === void 0) {\r\n                    ignored = [];\r\n                }\r\n                var result = {};\r\n                var style = window.getComputedStyle(element);\r\n                function assign(name, value, accepted) {\r\n                    if (accepted === void 0) {\r\n                        accepted = [];\r\n                    }\r\n                    if ((accepted.length === 0 || accepted.indexOf(value) !== -1) && ignored.indexOf(name) === -1) {\r\n                        if (value === 0 || value) {\r\n                            result[name] = value;\r\n                        }\r\n                    }\r\n                }\r\n                var pxScaleFactor = 96 / 72;\r\n                assign('fillColor', parseColor(element, 'backgroundColor'));\r\n                assign('lineColor', parseColor(element, 'borderColor'));\r\n                assign('fontStyle', parseFontStyle(style));\r\n                assign('textColor', parseColor(element, 'color'));\r\n                assign('halign', style.textAlign, ['left', 'right', 'center', 'justify']);\r\n                assign('valign', style.verticalAlign, ['middle', 'bottom', 'top']);\r\n                assign('fontSize', parseInt(style.fontSize || '') / pxScaleFactor);\r\n                assign('cellPadding', parsePadding(style.padding, style.fontSize, style.lineHeight, scaleFactor));\r\n                assign('lineWidth', parseInt(style.borderWidth || '') / pxScaleFactor / scaleFactor);\r\n                assign('font', (style.fontFamily || '').toLowerCase());\r\n                return result;\r\n            }\r\n            exports.parseCss = parseCss;\r\n            function parseFontStyle(style) {\r\n                var res = '';\r\n                if (style.fontWeight === 'bold' || style.fontWeight === 'bolder' || parseInt(style.fontWeight) >= 700) {\r\n                    res += 'bold';\r\n                }\r\n                if (style.fontStyle === 'italic' || style.fontStyle === 'oblique') {\r\n                    res += 'italic';\r\n                }\r\n                return res;\r\n            }\r\n            function parseColor(element, colorProp) {\r\n                var cssColor = realColor(element, colorProp);\r\n                if (!cssColor)\r\n                    return null;\r\n                var rgba = cssColor.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d*\\.?\\d*))?\\)$/);\r\n                if (!rgba || !Array.isArray(rgba)) {\r\n                    return null;\r\n                }\r\n                var color = [parseInt(rgba[1]), parseInt(rgba[2]), parseInt(rgba[3])];\r\n                var alpha = parseInt(rgba[4]);\r\n                if (alpha === 0 || isNaN(color[0]) || isNaN(color[1]) || isNaN(color[2])) {\r\n                    return null;\r\n                }\r\n                return color;\r\n            }\r\n            function realColor(elem, colorProp) {\r\n                if (!elem)\r\n                    return null;\r\n                var bg = window.getComputedStyle(elem)[colorProp];\r\n                if (bg === 'rgba(0, 0, 0, 0)' || bg === 'transparent' || bg === 'initial' || bg === 'inherit') {\r\n                    return realColor(elem.parentElement, colorProp);\r\n                }\r\n                else {\r\n                    return bg;\r\n                }\r\n            }\r\n            function parsePadding(val, fontSize, lineHeight, scaleFactor) {\r\n                if (!val)\r\n                    return null;\r\n                var pxScaleFactor = (96 / (72 / scaleFactor));\r\n                var linePadding = (parseInt(lineHeight) - parseInt(fontSize)) / scaleFactor / 2;\r\n                var padding = val.split(' ').map(function (n) {\r\n                    return parseInt(n) / pxScaleFactor;\r\n                });\r\n                padding = common_1.marginOrPadding(padding, 0);\r\n                if (linePadding > padding.top) {\r\n                    padding.top = linePadding;\r\n                }\r\n                if (linePadding > padding.bottom) {\r\n                    padding.bottom = linePadding;\r\n                }\r\n                return padding;\r\n            }\r\n            /***/ \r\n        }),\r\n        /* 14 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            \"use strict\";\r\n            Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            var common_1 = __webpack_require__(1);\r\n            function default_1(allOptions) {\r\n                var _loop_1 = function (settings) {\r\n                    if (settings && typeof settings !== 'object') {\r\n                        console.error(\"The options parameter should be of type object, is: \" + typeof settings);\r\n                    }\r\n                    if (typeof settings.extendWidth !== 'undefined') {\r\n                        settings.tableWidth = settings.extendWidth ? 'auto' : 'wrap';\r\n                        console.error(\"Use of deprecated option: extendWidth, use tableWidth instead.\");\r\n                    }\r\n                    if (typeof settings.margins !== 'undefined') {\r\n                        if (typeof settings.margin === 'undefined')\r\n                            settings.margin = settings.margins;\r\n                        console.error(\"Use of deprecated option: margins, use margin instead.\");\r\n                    }\r\n                    if (!settings.didDrawPage && (settings.afterPageContent || settings.beforePageContent || settings.afterPageAdd)) {\r\n                        console.error(\"The afterPageContent, beforePageContent and afterPageAdd hooks are deprecated. Use didDrawPage instead\");\r\n                        settings.didDrawPage = function (data) {\r\n                            common_1.applyUserStyles();\r\n                            if (settings.beforePageContent)\r\n                                settings.beforePageContent(data);\r\n                            common_1.applyUserStyles();\r\n                            if (settings.afterPageContent)\r\n                                settings.afterPageContent(data);\r\n                            common_1.applyUserStyles();\r\n                            if (settings.afterPageAdd && data.pageNumber > 1) {\r\n                                data.afterPageAdd(data);\r\n                            }\r\n                            common_1.applyUserStyles();\r\n                        };\r\n                    }\r\n                    [\"createdHeaderCell\", \"drawHeaderRow\", \"drawRow\", \"drawHeaderCell\"].forEach(function (name) {\r\n                        if (settings[name]) {\r\n                            console.error(\"The \\\"\" + name + \"\\\" hook has changed in version 3.0, check the changelog for how to migrate.\");\r\n                        }\r\n                    });\r\n                    [['showFoot', 'showFooter'], ['showHead', 'showHeader'], ['didDrawPage', 'addPageContent'], ['didParseCell', 'createdCell'], ['headStyles', 'headerStyles']].forEach(function (_a) {\r\n                        var current = _a[0], deprecated = _a[1];\r\n                        if (settings[deprecated]) {\r\n                            console.error(\"Use of deprecated option \" + deprecated + \". Use \" + current + \" instead\");\r\n                            settings[current] = settings[deprecated];\r\n                        }\r\n                    });\r\n                    [['padding', 'cellPadding'], ['lineHeight', 'rowHeight'], 'fontSize', 'overflow'].forEach(function (o) {\r\n                        var deprecatedOption = typeof o === 'string' ? o : o[0];\r\n                        var style = typeof o === 'string' ? o : o[1];\r\n                        if (typeof settings[deprecatedOption] !== 'undefined') {\r\n                            if (typeof settings.styles[style] === 'undefined') {\r\n                                settings.styles[style] = settings[deprecatedOption];\r\n                            }\r\n                            console.error(\"Use of deprecated option: \" + deprecatedOption + \", use the style \" + style + \" instead.\");\r\n                        }\r\n                    });\r\n                    for (var _i = 0, _a = ['styles', 'bodyStyles', 'headStyles', 'footStyles']; _i < _a.length; _i++) {\r\n                        var styleProp = _a[_i];\r\n                        checkStyles(settings[styleProp] || {});\r\n                    }\r\n                    var columnStyles = settings['columnStyles'] || {};\r\n                    for (var _b = 0, _c = Object.keys(columnStyles); _b < _c.length; _b++) {\r\n                        var dataKey = _c[_b];\r\n                        checkStyles(columnStyles[dataKey] || {});\r\n                    }\r\n                };\r\n                for (var _i = 0, allOptions_1 = allOptions; _i < allOptions_1.length; _i++) {\r\n                    var settings = allOptions_1[_i];\r\n                    _loop_1(settings);\r\n                }\r\n            }\r\n            exports.default = default_1;\r\n            function checkStyles(styles) {\r\n                if (styles.rowHeight) {\r\n                    console.error(\"Use of deprecated style rowHeight. It is renamed to minCellHeight.\");\r\n                    if (!styles.minCellHeight) {\r\n                        styles.minCellHeight = styles.rowHeight;\r\n                    }\r\n                }\r\n                else if (styles.columnWidth) {\r\n                    console.error(\"Use of deprecated style columnWidth. It is renamed to cellWidth.\");\r\n                    if (!styles.cellWidth) {\r\n                        styles.cellWidth = styles.columnWidth;\r\n                    }\r\n                }\r\n            }\r\n            /***/ \r\n        }),\r\n        /* 15 */\r\n        /***/ (function (module, exports, __webpack_require__) {\r\n            var jsPDF = __webpack_require__(4);\r\n            /**\r\n             * Improved text function with halign and valign support\r\n             * Inspiration from: http://stackoverflow.com/questions/28327510/align-text-right-using-jspdf/28433113#28433113\r\n             */\r\n            jsPDF.API.autoTableText = function (text, x, y, styles) {\r\n                styles = styles || {};\r\n                var FONT_ROW_RATIO = 1.15;\r\n                if (typeof x !== 'number' || typeof y !== 'number') {\r\n                    console.error('The x and y parameters are required. Missing for text: ', text);\r\n                }\r\n                var k = this.internal.scaleFactor;\r\n                var fontSize = this.internal.getFontSize() / k;\r\n                var splitRegex = /\\r\\n|\\r|\\n/g;\r\n                var splitText = null;\r\n                var lineCount = 1;\r\n                if (styles.valign === 'middle' || styles.valign === 'bottom' || styles.halign === 'center' || styles.halign === 'right') {\r\n                    splitText = typeof text === 'string' ? text.split(splitRegex) : text;\r\n                    lineCount = splitText.length || 1;\r\n                }\r\n                // Align the top\r\n                y += fontSize * (2 - FONT_ROW_RATIO);\r\n                if (styles.valign === 'middle')\r\n                    y -= (lineCount / 2) * fontSize * FONT_ROW_RATIO;\r\n                else if (styles.valign === 'bottom')\r\n                    y -= lineCount * fontSize * FONT_ROW_RATIO;\r\n                if (styles.halign === 'center' || styles.halign === 'right') {\r\n                    var alignSize = fontSize;\r\n                    if (styles.halign === 'center')\r\n                        alignSize *= 0.5;\r\n                    if (lineCount >= 1) {\r\n                        for (var iLine = 0; iLine < splitText.length; iLine++) {\r\n                            this.text(splitText[iLine], x - this.getStringUnitWidth(splitText[iLine]) * alignSize, y);\r\n                            y += fontSize;\r\n                        }\r\n                        return this;\r\n                    }\r\n                    x -= this.getStringUnitWidth(text) * alignSize;\r\n                }\r\n                if (styles.halign === 'justify') {\r\n                    this.text(text, x, y, { maxWidth: styles.maxWidth || 100, align: 'justify' });\r\n                }\r\n                else {\r\n                    this.text(text, x, y);\r\n                }\r\n                return this;\r\n            };\r\n            /***/ \r\n        })\r\n        /******/ \r\n    ]);\r\n});\r\n",null]}