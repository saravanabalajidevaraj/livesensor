{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\base.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\base.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { isUndefined, isNullOrUndefined, merge, setImmediate, setValue, getValue } from './util';\r\nimport { addClass, removeClass } from './dom';\r\nimport { Observer } from './observer';\r\nvar isColEName = new RegExp('\\]');\r\n/* tslint:enable:no-any */\r\n/**\r\n * Base library module is common module for Framework modules like touch,keyboard and etc.,\r\n * @private\r\n */\r\nvar Base = /** @class */ /*@__PURE__*/ (function () {\r\n    /**\r\n     * Base constructor accept options and element\r\n     */\r\n    function Base(options, element) {\r\n        this.isProtectedOnChange = true;\r\n        this.properties = {};\r\n        this.changedProperties = {};\r\n        this.oldProperties = {};\r\n        this.refreshing = false;\r\n        // tslint:disable-next-line:no-empty\r\n        this.finalUpdate = function () { };\r\n        this.childChangedProperties = {};\r\n        this.modelObserver = new Observer(this);\r\n        if (!isUndefined(element)) {\r\n            if ('string' === typeof (element)) {\r\n                this.element = document.querySelector(element);\r\n            }\r\n            else {\r\n                this.element = element;\r\n            }\r\n            if (!isNullOrUndefined(this.element)) {\r\n                this.isProtectedOnChange = false;\r\n                this.addInstance();\r\n            }\r\n        }\r\n        if (!isUndefined(options)) {\r\n            this.setProperties(options, true);\r\n        }\r\n        this.isDestroyed = false;\r\n    }\r\n    /** Property base section */\r\n    /**\r\n     * Function used to set bunch of property at a time.\r\n     * @private\r\n     * @param  {Object} prop - JSON object which holds components properties.\r\n     * @param  {boolean} muteOnChange? - Specifies to true when we set properties.\r\n     */\r\n    Base.prototype.setProperties = function (prop, muteOnChange) {\r\n        var prevDetection = this.isProtectedOnChange;\r\n        this.isProtectedOnChange = !!muteOnChange;\r\n        merge(this, prop);\r\n        if (muteOnChange !== true) {\r\n            merge(this.changedProperties, prop);\r\n            this.dataBind();\r\n        }\r\n        this.finalUpdate();\r\n        this.changedProperties = {};\r\n        this.oldProperties = {};\r\n        this.isProtectedOnChange = prevDetection;\r\n    };\r\n    ;\r\n    /**\r\n     * Calls for child element data bind\r\n     * @param {Object} obj\r\n     * @param {Object} parent\r\n     * @returns {void}\r\n     */\r\n    // tslint:disable-next-line:no-any\r\n    Base.callChildDataBind = function (obj, parent) {\r\n        var keys = Object.keys(obj);\r\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n            var key = keys_1[_i];\r\n            if (parent[key] instanceof Array) {\r\n                for (var _a = 0, _b = parent[key]; _a < _b.length; _a++) {\r\n                    var obj_1 = _b[_a];\r\n                    if (obj_1.dataBind !== undefined) {\r\n                        obj_1.dataBind();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                parent[key].dataBind();\r\n            }\r\n        }\r\n    };\r\n    Base.prototype.clearChanges = function () {\r\n        this.finalUpdate();\r\n        this.changedProperties = {};\r\n        this.oldProperties = {};\r\n        this.childChangedProperties = {};\r\n    };\r\n    /**\r\n     * Bind property changes immediately to components\r\n     */\r\n    Base.prototype.dataBind = function () {\r\n        Base.callChildDataBind(this.childChangedProperties, this);\r\n        if (Object.getOwnPropertyNames(this.changedProperties).length) {\r\n            var prevDetection = this.isProtectedOnChange;\r\n            var newChanges = this.changedProperties;\r\n            var oldChanges = this.oldProperties;\r\n            this.clearChanges();\r\n            this.isProtectedOnChange = true;\r\n            this.onPropertyChanged(newChanges, oldChanges);\r\n            this.isProtectedOnChange = prevDetection;\r\n        }\r\n    };\r\n    ;\r\n    Base.prototype.saveChanges = function (key, newValue, oldValue) {\r\n        if (this.isProtectedOnChange) {\r\n            return;\r\n        }\r\n        this.oldProperties[key] = oldValue;\r\n        this.changedProperties[key] = newValue;\r\n        this.finalUpdate();\r\n        this.finalUpdate = setImmediate(this.dataBind.bind(this));\r\n    };\r\n    ;\r\n    /** Event Base Section */\r\n    /**\r\n     * Adds the handler to the given event listener.\r\n     * @param {string} eventName - A String that specifies the name of the event\r\n     * @param {Function} listener - Specifies the call to run when the event occurs.\r\n     * @return {void}\r\n     */\r\n    Base.prototype.addEventListener = function (eventName, handler) {\r\n        this.modelObserver.on(eventName, handler);\r\n    };\r\n    /**\r\n     * Removes the handler from the given event listener.\r\n     * @param {string} eventName - A String that specifies the name of the event to remove\r\n     * @param {Function} listener - Specifies the function to remove\r\n     * @return {void}\r\n     */\r\n    Base.prototype.removeEventListener = function (eventName, handler) {\r\n        this.modelObserver.off(eventName, handler);\r\n    };\r\n    /**\r\n     * Triggers the handlers in the specified event.\r\n     * @private\r\n     * @param {string} eventName - Specifies the event to trigger for the specified component properties.\r\n     * Can be a custom event, or any of the standard events.\r\n     * @param {Event} eventProp - Additional parameters to pass on to the event properties\r\n     * @return {void}\r\n     */\r\n    Base.prototype.trigger = function (eventName, eventProp) {\r\n        if (this.isDestroyed !== true) {\r\n            var prevDetection = this.isProtectedOnChange;\r\n            this.isProtectedOnChange = false;\r\n            this.modelObserver.notify(eventName, eventProp);\r\n            if (isColEName.test(eventName)) {\r\n                var handler = getValue(eventName, this);\r\n                if (handler) {\r\n                    handler.call(this, eventProp);\r\n                }\r\n            }\r\n            this.isProtectedOnChange = prevDetection;\r\n        }\r\n    };\r\n    /**\r\n     * To maintain instance in base class\r\n     */\r\n    Base.prototype.addInstance = function () {\r\n        // Add module class to the root element\r\n        var moduleClass = 'e-' + this.getModuleName().toLowerCase();\r\n        addClass([this.element], ['e-lib', moduleClass]);\r\n        if (!isNullOrUndefined(this.element.ej2_instances)) {\r\n            this.element.ej2_instances.push(this);\r\n        }\r\n        else {\r\n            setValue('ej2_instances', [this], this.element);\r\n        }\r\n    };\r\n    /**\r\n     * To remove the instance from the element\r\n     */\r\n    Base.prototype.destroy = function () {\r\n        var _this = this;\r\n        this.element.ej2_instances =\r\n            this.element.ej2_instances.filter(function (i) { return i !== _this; });\r\n        removeClass([this.element], ['e-' + this.getModuleName()]);\r\n        if (this.element.ej2_instances.length === 0) {\r\n            // Remove module class from the root element\r\n            removeClass([this.element], ['e-lib']);\r\n        }\r\n        this.clearChanges();\r\n        this.modelObserver.destroy();\r\n        this.isDestroyed = true;\r\n    };\r\n    return Base;\r\n}());\r\nexport { Base };\r\n/**\r\n * Global function to get the component instance from the rendered element.\r\n * @param elem Specifies the HTMLElement or element id string.\r\n * @param comp Specifies the component module name or Component.\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function getComponent(elem, comp) {\r\n    var instance;\r\n    var i;\r\n    var ele = typeof elem === 'string' ? document.getElementById(elem) : elem;\r\n    for (i = 0; i < elem.ej2_instances.length; i++) {\r\n        instance = elem.ej2_instances[i];\r\n        if (typeof comp === 'string') {\r\n            var compName = instance.getModuleName();\r\n            if (comp === compName) {\r\n                return instance;\r\n            }\r\n        }\r\n        else {\r\n            // tslint:disable-next-line:no-any\r\n            if (instance instanceof comp) {\r\n                return instance;\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n",null]}