{"remainingRequest":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-base\\src\\ajax.js","dependencies":[{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-base\\src\\ajax.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { isNullOrUndefined, merge } from './util';\r\nvar headerRegex = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\r\nvar defaultType = 'GET';\r\n/**\r\n * Ajax class provides ability to make asynchronous HTTP request to the server\r\n * ```typescript\r\n *   var ajax = new Ajax(\"index.html\", \"GET\", true);\r\n *   ajax.send().then(\r\n *               function (value) {\r\n *                   console.log(value);\r\n *               },\r\n *               function (reason) {\r\n *                   console.log(reason);\r\n *               });\r\n * ```\r\n */\r\nvar Ajax = /** @class */ /*@__PURE__*/ (function () {\r\n    /**\r\n     * Constructor for Ajax class\r\n     * @param  {string|Object} options?\r\n     * @param  {string} type?\r\n     * @param  {boolean} async?\r\n     * @returns defaultType\r\n     */\r\n    function Ajax(options, type, async, contentType) {\r\n        /**\r\n         * A boolean value indicating whether the request should be sent asynchronous or not.\r\n         * @default true\r\n         */\r\n        this.mode = true;\r\n        /**\r\n         * A boolean value indicating whether to ignore the promise reject.\r\n         * @private\r\n         * @default true\r\n         */\r\n        this.emitError = true;\r\n        this.options = {};\r\n        if (typeof options === 'string') {\r\n            this.url = options;\r\n            this.type = type ? type.toUpperCase() : defaultType;\r\n            this.mode = !isNullOrUndefined(async) ? async : true;\r\n        }\r\n        else if (typeof options === 'object') {\r\n            this.options = options;\r\n            merge(this, this.options);\r\n        }\r\n        this.type = this.type ? this.type.toUpperCase() : defaultType;\r\n        this.contentType = (this.contentType !== undefined) ? this.contentType : contentType;\r\n    }\r\n    /**\r\n     * Send the request to server.\r\n     * @param {any} data - To send the user data\r\n     * @return {Promise}\r\n     */\r\n    Ajax.prototype.send = function (data) {\r\n        var _this = this;\r\n        this.data = isNullOrUndefined(data) ? this.data : data;\r\n        var eventArgs = {\r\n            cancel: false\r\n        };\r\n        var promise = new Promise(function (resolve, reject) {\r\n            _this.httpRequest = new XMLHttpRequest();\r\n            _this.httpRequest.onreadystatechange = function () { _this.stateChange(resolve, reject); };\r\n            if (!isNullOrUndefined(_this.onLoad)) {\r\n                _this.httpRequest.onload = _this.onLoad;\r\n            }\r\n            if (!isNullOrUndefined(_this.onProgress)) {\r\n                _this.httpRequest.onprogress = _this.onProgress;\r\n            }\r\n            /* istanbul ignore next */\r\n            if (!isNullOrUndefined(_this.onAbort)) {\r\n                _this.httpRequest.onabort = _this.onAbort;\r\n            }\r\n            /* istanbul ignore next */\r\n            if (!isNullOrUndefined(_this.onError)) {\r\n                _this.httpRequest.onerror = _this.onError;\r\n            }\r\n            //** Upload Events **/\r\n            /* istanbul ignore next */\r\n            if (!isNullOrUndefined(_this.onUploadProgress)) {\r\n                _this.httpRequest.upload.onprogress = _this.onUploadProgress;\r\n            }\r\n            _this.httpRequest.open(_this.type, _this.url, _this.mode);\r\n            // Set default headers\r\n            if (!isNullOrUndefined(_this.data) && _this.contentType !== null) {\r\n                _this.httpRequest.setRequestHeader('Content-Type', _this.contentType || 'application/json; charset=utf-8');\r\n            }\r\n            if (_this.beforeSend) {\r\n                _this.beforeSend(eventArgs);\r\n            }\r\n            if (!eventArgs.cancel) {\r\n                _this.httpRequest.send(!isNullOrUndefined(_this.data) ? _this.data : null);\r\n            }\r\n        });\r\n        return promise;\r\n    };\r\n    Ajax.prototype.successHandler = function (data) {\r\n        if (this.onSuccess) {\r\n            this.onSuccess(data, this);\r\n        }\r\n        return data;\r\n    };\r\n    Ajax.prototype.failureHandler = function (reason) {\r\n        if (this.onFailure) {\r\n            this.onFailure(this.httpRequest);\r\n        }\r\n        return reason;\r\n    };\r\n    Ajax.prototype.stateChange = function (resolve, reject) {\r\n        var data = this.httpRequest.responseText;\r\n        if (this.dataType && this.dataType.toLowerCase() === 'json') {\r\n            if (data === '') {\r\n                data = undefined;\r\n            }\r\n            else {\r\n                try {\r\n                    data = JSON.parse(data);\r\n                }\r\n                catch (error) {\r\n                    // no exception handle\r\n                }\r\n            }\r\n        }\r\n        if (this.httpRequest.readyState === 4) {\r\n            //success range should be 200 to 299\r\n            if ((this.httpRequest.status >= 200 && this.httpRequest.status <= 299) || this.httpRequest.status === 304) {\r\n                resolve(this.successHandler(data));\r\n            }\r\n            else {\r\n                if (this.emitError) {\r\n                    reject(new Error(this.failureHandler(this.httpRequest.statusText)));\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * To get the response header from XMLHttpRequest\r\n     * @param  {string} key Key to search in the response header\r\n     * @returns {string}\r\n     */\r\n    Ajax.prototype.getResponseHeader = function (key) {\r\n        var responseHeaders;\r\n        var header;\r\n        responseHeaders = {};\r\n        var headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\r\n        while (headers) {\r\n            responseHeaders[headers[1].toLowerCase()] = headers[2];\r\n            headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\r\n        }\r\n        header = responseHeaders[key.toLowerCase()];\r\n        return isNullOrUndefined(header) ? null : header;\r\n    };\r\n    return Ajax;\r\n}());\r\nexport { Ajax };\r\n",null]}