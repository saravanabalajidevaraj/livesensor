{"remainingRequest":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-inputs\\src\\textbox\\textbox.js","dependencies":[{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-inputs\\src\\textbox\\textbox.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { __decorate } from \"tslib\";\nimport { Component, Property, Event, EventHandler, L10n, setValue, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, detach, Internationalization, getUniqueID } from '@syncfusion/ej2-base';\nimport { Input } from '../input/input';\nvar ROOT = 'e-textbox';\nvar CONTROL = 'e-control';\nvar HIDE_CLEAR = 'e-clear-icon-hide';\n/**\n * Represents the TextBox component that allows the user to enter the values based on it's type.\n * ```html\n * <input name='images' id='textbox'/>\n * ```\n * ```typescript\n * <script>\n *   var textboxObj = new TextBox();\n *   textboxObj.appendTo('#textbox');\n * </script>\n * ```\n */\nvar TextBox = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(TextBox, _super);\n    function TextBox(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.previousValue = null;\n        return _this;\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    TextBox.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'floatLabelType':\n                    Input.removeFloating(this.textboxWrapper);\n                    Input.addFloating(this.element, this.floatLabelType, this.placeholder);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container);\n                    break;\n                case 'value':\n                    var prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    if (!this.isBlank(this.value)) {\n                        this.value = this.value.toString();\n                    }\n                    this.isProtectedOnChange = prevOnChange;\n                    Input.setValue(this.value, this.element, this.floatLabelType, this.showClearButton);\n                    this.raiseChangeEvent();\n                    break;\n                case 'readonly':\n                    Input.setReadonly(this.readonly, this.element);\n                    break;\n                case 'type':\n                    this.element.setAttribute('type', this.type);\n                    this.raiseChangeEvent();\n                    break;\n                case 'showClearButton':\n                    Input.setClearButton(this.showClearButton, this.element, this.textboxWrapper);\n                    this.bindClearEvent();\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(this.placeholder, this.element);\n                    break;\n                case 'cssClass':\n                    Input.setCssClass(this.cssClass, [this.textboxWrapper.container]);\n                    break;\n                case 'locale':\n                    this.globalize = new Internationalization(this.locale);\n                    this.l10n.setLocale(this.locale);\n                    this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);\n                    Input.setPlaceholder(this.placeholder, this.element);\n                    break;\n            }\n        }\n    };\n    /**\n     * Gets the component name\n     * @private\n     */\n    TextBox.prototype.getModuleName = function () {\n        return 'textbox';\n    };\n    TextBox.prototype.isBlank = function (str) {\n        return (!str || /^\\s*$/.test(str));\n    };\n    TextBox.prototype.preRender = function () {\n        this.cloneElement = this.element.cloneNode(true);\n        /* istanbul ignore next */\n        if (this.element.tagName === 'EJS-TEXTBOX') {\n            var ejInstance = getValue('ej2_instances', this.element);\n            var inputElement = this.createElement('input');\n            var index = 0;\n            for (index; index < this.element.attributes.length; index++) {\n                inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n                inputElement.innerHTML = this.element.innerHTML;\n            }\n            this.element.appendChild(inputElement);\n            this.element = inputElement;\n            setValue('ej2_instances', ejInstance, this.element);\n        }\n        var attributes = this.element.attributes;\n        this.checkAttributes(attributes);\n        this.element.setAttribute('type', this.type);\n        this.globalize = new Internationalization(this.locale);\n        var localeText = { placeholder: this.placeholder };\n        this.l10n = new L10n('textbox', localeText, this.locale);\n        if (this.l10n.getConstant('placeholder') !== '') {\n            this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);\n        }\n        if (!this.element.hasAttribute('id')) {\n            this.element.setAttribute('id', getUniqueID('textbox'));\n        }\n        if (!this.element.hasAttribute('name')) {\n            this.element.setAttribute('name', this.element.getAttribute('id'));\n        }\n    };\n    TextBox.prototype.checkAttributes = function (attrs) {\n        for (var i = 0; i < attrs.length; i++) {\n            var key = attrs[i].nodeName;\n            if (key === 'disabled') {\n                this.setProperties({ enabled: false }, true);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: true }, true);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: attrs[i].nodeValue }, true);\n            }\n        }\n    };\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    TextBox.prototype.render = function () {\n        this.textboxWrapper = Input.createInput({\n            element: this.element,\n            floatLabelType: this.floatLabelType,\n            properties: {\n                enabled: this.enabled,\n                enableRtl: this.enableRtl,\n                cssClass: this.cssClass,\n                readonly: this.readonly,\n                placeholder: this.placeholder,\n                showClearButton: this.showClearButton\n            }\n        });\n        this.wireEvents();\n        if (this.element.value !== '') {\n            this.value = this.element.value;\n        }\n        if (!isNullOrUndefined(this.value)) {\n            Input.setValue(this.value, this.element, this.floatLabelType, this.showClearButton);\n        }\n    };\n    TextBox.prototype.wireEvents = function () {\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'blur', this.focusOutHandler, this);\n        EventHandler.add(this.element, 'input', this.inputHandler, this);\n        EventHandler.add(this.element, 'change', this.changeHandler, this);\n        if (this.enabled) {\n            this.bindClearEvent();\n        }\n    };\n    TextBox.prototype.focusHandler = function (args) {\n        var eventArgs = {\n            container: this.textboxWrapper.container,\n            event: args,\n            value: this.value\n        };\n        this.trigger('focus', eventArgs);\n    };\n    TextBox.prototype.focusOutHandler = function (args) {\n        if (!(this.previousValue === null && this.value === null && this.element.value === '') &&\n            (this.previousValue !== this.element.value)) {\n            this.raiseChangeEvent(args, true);\n        }\n        var eventArgs = {\n            container: this.textboxWrapper.container,\n            event: args,\n            value: this.value\n        };\n        this.trigger('blur', eventArgs);\n    };\n    TextBox.prototype.inputHandler = function (args) {\n        var eventArgs = {\n            event: args,\n            value: this.element.value,\n            previousValue: this.value,\n            container: this.textboxWrapper.container\n        };\n        this.trigger('input', eventArgs);\n    };\n    TextBox.prototype.changeHandler = function (args) {\n        this.setProperties({ value: this.element.value }, true);\n        this.raiseChangeEvent(args, true);\n    };\n    TextBox.prototype.raiseChangeEvent = function (event, interaction) {\n        var eventArgs = {\n            event: event,\n            value: this.value,\n            previousValue: this.previousValue,\n            container: this.textboxWrapper.container,\n            isInteraction: interaction ? interaction : false\n        };\n        this.trigger('change', eventArgs);\n        this.previousValue = this.value;\n    };\n    TextBox.prototype.bindClearEvent = function () {\n        if (this.showClearButton) {\n            EventHandler.add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);\n        }\n    };\n    TextBox.prototype.resetInputHandler = function (event) {\n        event.preventDefault();\n        if (!(this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR))) {\n            Input.setValue('', this.element, this.floatLabelType, this.showClearButton);\n            this.value = '';\n        }\n    };\n    TextBox.prototype.unWireEvents = function () {\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'blur', this.focusOutHandler);\n        EventHandler.remove(this.element, 'input', this.inputHandler);\n        EventHandler.remove(this.element, 'change', this.changeHandler);\n    };\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also, it maintains the initial TextBox element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    TextBox.prototype.destroy = function () {\n        this.unWireEvents();\n        this.element.classList.remove('e-input');\n        this.removeAttributes(['aria-placeholder', 'aria-disabled', 'aria-readonly', 'aria-labelledby']);\n        this.textboxWrapper.container.parentElement.appendChild(this.element);\n        detach(this.textboxWrapper.container);\n        this.textboxWrapper = null;\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    TextBox.prototype.getPersistData = function () {\n        var keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * Adding the multiple attributes as key-value pair to the TextBox element.\n     * @param { { [key: string]: string } } attributes - Specifies the attributes to be add to TextBox element.\n     * @return {void}\n     */\n    TextBox.prototype.addAttributes = function (attributes) {\n        for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (key === 'disabled') {\n                this.setProperties({ enabled: false }, true);\n                Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: true }, true);\n                Input.setReadonly(this.readonly, this.element);\n            }\n            else if (key === 'class') {\n                this.element.classList.add(attributes[key]);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: attributes[key] }, true);\n                Input.setPlaceholder(this.placeholder, this.element);\n            }\n            else {\n                this.element.setAttribute(key, attributes[key]);\n            }\n        }\n    };\n    /**\n     * Removing the multiple attributes as key-value pair to the TextBox element.\n     * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.\n     * @return {void}\n     */\n    TextBox.prototype.removeAttributes = function (attributes) {\n        for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {\n            var key = attributes_1[_i];\n            if (key === 'disabled') {\n                this.setProperties({ enabled: true }, true);\n                Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: false }, true);\n                Input.setReadonly(this.readonly, this.element);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: null }, true);\n                Input.setPlaceholder(this.placeholder, this.element);\n            }\n            else {\n                this.element.removeAttribute(key);\n            }\n        }\n    };\n    __decorate([\n        Property('text')\n    ], TextBox.prototype, \"type\", void 0);\n    __decorate([\n        Property(false)\n    ], TextBox.prototype, \"readonly\", void 0);\n    __decorate([\n        Property(null)\n    ], TextBox.prototype, \"value\", void 0);\n    __decorate([\n        Property('Never')\n    ], TextBox.prototype, \"floatLabelType\", void 0);\n    __decorate([\n        Property('')\n    ], TextBox.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(null)\n    ], TextBox.prototype, \"placeholder\", void 0);\n    __decorate([\n        Property(false)\n    ], TextBox.prototype, \"enableRtl\", void 0);\n    __decorate([\n        Property(true)\n    ], TextBox.prototype, \"enabled\", void 0);\n    __decorate([\n        Property(false)\n    ], TextBox.prototype, \"showClearButton\", void 0);\n    __decorate([\n        Property(false)\n    ], TextBox.prototype, \"enablePersistence\", void 0);\n    __decorate([\n        Event()\n    ], TextBox.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], TextBox.prototype, \"destroyed\", void 0);\n    __decorate([\n        Event()\n    ], TextBox.prototype, \"change\", void 0);\n    __decorate([\n        Event()\n    ], TextBox.prototype, \"blur\", void 0);\n    __decorate([\n        Event()\n    ], TextBox.prototype, \"focus\", void 0);\n    __decorate([\n        Event()\n    ], TextBox.prototype, \"input\", void 0);\n    TextBox = __decorate([\n        NotifyPropertyChanges\n    ], TextBox);\n    return TextBox;\n}(Component));\nexport { TextBox };\n",null]}