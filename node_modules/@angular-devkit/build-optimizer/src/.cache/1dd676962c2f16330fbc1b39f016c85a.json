{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-splitbuttons\\src\\drop-down-button\\drop-down-button.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-splitbuttons\\src\\drop-down-button\\drop-down-button.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { __decorate } from \"tslib\";\nimport { Collection, Event, NotifyPropertyChanges, detach, Property, EventHandler } from '@syncfusion/ej2-base';\nimport { addClass, getUniqueID, rippleEffect } from '@syncfusion/ej2-base';\nimport { attributes, Component, closest, select } from '@syncfusion/ej2-base';\nimport { classList, removeClass } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport { getModel, Item } from './../common/common';\nvar classNames = {\n    DISABLED: 'e-disabled',\n    FOCUS: 'e-focused',\n    ICON: 'e-menu-icon',\n    ITEM: 'e-item',\n    POPUP: 'e-dropdown-popup',\n    RTL: 'e-rtl',\n    SEPARATOR: 'e-separator',\n    VERTICAL: 'e-vertical'\n};\n/**\n * DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n * It can contain both text and images.\n * ``````html\n * <button id=\"element\">DropDownButton</button>\n * ```\n * ```typescript\n * <script>\n * var dropDownButtonObj = new DropDownButton({items: [{ text: 'Action1' }, { text: 'Action2' },{ text: 'Action3' }]);\n * dropDownButtonObj.appendTo(\"#element\");\n * </script>\n * ```\n */\nvar DropDownButton = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DropDownButton, _super);\n    /**\n     * Constructor for creating the widget\n     * @param  {DropDownButtonModel} options?\n     * @param  {string|HTMLButtonElement} element?\n     */\n    function DropDownButton(options, element) {\n        return _super.call(this, options, element) || this;\n    }\n    DropDownButton.prototype.preRender = function () {\n        /** */\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     */\n    DropDownButton.prototype.getPersistData = function () {\n        return this.addOnPersist([]);\n    };\n    /**\n     * To open/close DropDownButton popup based on current state of the DropDownButton.\n     * @returns void\n     */\n    DropDownButton.prototype.toggle = function () {\n        this.canOpen() ? this.openPopUp() : this.closePopup();\n    };\n    /**\n     * Initialize the Component rendering\n     * @returns void\n     * @private\n     */\n    DropDownButton.prototype.render = function () {\n        this.initialize();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n    };\n    DropDownButton.prototype.createPopup = function () {\n        var _a;\n        var div = this.createElement('div', {\n            className: classNames.POPUP,\n            id: this.element.id + '-popup'\n        });\n        document.body.appendChild(div);\n        this.dropDown = new Popup(div, {\n            relateTo: this.element,\n            collision: { X: 'fit', Y: 'flip' },\n            position: { X: 'left', Y: 'bottom' },\n            targetType: 'relative',\n            content: this.target ? this.getTargetElement() : '',\n            enableRtl: this.enableRtl\n        });\n        if (this.dropDown.element.style.position === 'fixed') {\n            this.dropDown.refreshPosition(this.element);\n        }\n        this.dropDown.hide();\n        attributes(this.element, (_a = {},\n            _a['role'] = 'menu',\n            _a['aria-haspopup'] = this.items.length || this.target ? 'true' : 'false',\n            _a['aria-expanded'] = 'false',\n            _a['aria-owns'] = this.getPopUpElement().id,\n            _a['type'] = 'button',\n            _a));\n        if (this.cssClass) {\n            addClass([div], this.cssClass.split(' '));\n        }\n    };\n    DropDownButton.prototype.getTargetElement = function () {\n        return typeof (this.target) === 'string' ? select(this.target) : this.target;\n    };\n    DropDownButton.prototype.createItems = function (items) {\n        var showIcon = this.hasIcon(items, 'iconCss');\n        var span;\n        var item;\n        var li;\n        var eventArgs;\n        var ul = this.createElement('ul', {\n            attrs: { 'tabindex': '0' }\n        });\n        for (var i = 0; i < items.length; i++) {\n            item = items[i];\n            li = this.createElement('li', {\n                innerHTML: item.url ? '' : item.text,\n                className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,\n                attrs: { 'role': 'menuItem', 'tabindex': '-1' },\n                id: item.id ? item.id : getUniqueID('e-' + this.getModuleName() + '-item')\n            });\n            if (item.iconCss) {\n                span = this.createElement('span', { className: classNames.ICON + ' ' + item.iconCss });\n                li.insertBefore(span, li.childNodes[0]);\n            }\n            else {\n                if (showIcon && !item.separator) {\n                    li.classList.add('e-blank-icon');\n                }\n            }\n            if (item.url) {\n                li.appendChild(this.createAnchor(item));\n            }\n            eventArgs = { item: item, element: li };\n            this.trigger('beforeItemRender', eventArgs);\n            ul.appendChild(li);\n        }\n        return ul;\n    };\n    DropDownButton.prototype.hasIcon = function (items, field) {\n        for (var i = 0, len = items.length; i < len; i++) {\n            if (items[i][field]) {\n                return true;\n            }\n        }\n        return false;\n    };\n    DropDownButton.prototype.createAnchor = function (item) {\n        return this.createElement('a', { className: 'e-menu-text e-menu-url', innerHTML: item.text, attrs: { 'href': item.url } });\n    };\n    DropDownButton.prototype.initialize = function () {\n        this.button = new Button({\n            iconCss: this.iconCss, iconPosition: this.iconPosition, cssClass: this.cssClass, content: this.content,\n            disabled: this.disabled, enableRtl: this.enableRtl, enablePersistence: this.enablePersistence\n        });\n        this.button.createElement = this.createElement;\n        this.button.appendTo(this.element);\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n        this.appendArrowSpan();\n        this.createPopup();\n        this.setActiveElem([this.element]);\n    };\n    DropDownButton.prototype.appendArrowSpan = function () {\n        this.element.appendChild(this.createElement('span', {\n            className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(classNames.VERTICAL) > -1\n                ? 'bottom' : 'right') + ' e-caret'\n        }));\n    };\n    DropDownButton.prototype.setActiveElem = function (elem) {\n        this.activeElem = elem;\n    };\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    DropDownButton.prototype.getModuleName = function () {\n        return 'dropdown-btn';\n    };\n    DropDownButton.prototype.canOpen = function () {\n        return this.getPopUpElement().classList.contains('e-popup-close');\n    };\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    DropDownButton.prototype.destroy = function () {\n        var _this = this;\n        _super.prototype.destroy.call(this);\n        if (this.getModuleName() === 'dropdown-btn') {\n            var attrList = void 0;\n            var classList_1;\n            if (this.element.querySelector('span.e-caret')) {\n                detach(this.element.querySelector('span.e-caret'));\n            }\n            if (this.cssClass) {\n                classList_1 = this.cssClass.split(' ');\n            }\n            this.button.destroy();\n            if (classList_1) {\n                removeClass([this.element], classList_1);\n            }\n            removeClass(this.activeElem, ['e-active']);\n            attrList = this.element.getAttribute('class') ? ['role', 'aria-haspopup', 'aria-expanded', 'aria-owns', 'type']\n                : ['role', 'aria-haspopup', 'aria-expanded', 'aria-owns', 'type', 'class'];\n            attrList.forEach(function (key) {\n                _this.element.removeAttribute(key);\n            });\n            this.dropDown.destroy();\n            var popupEle = document.getElementById(this.getPopUpElement().id);\n            if (popupEle) {\n                removeClass([popupEle], ['e-popup-open', 'e-popup-close']);\n                detach(popupEle);\n            }\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n        }\n    };\n    DropDownButton.prototype.getPopUpElement = function () {\n        return this.dropDown.element;\n    };\n    DropDownButton.prototype.getULElement = function () {\n        return this.getPopUpElement().children[0];\n    };\n    DropDownButton.prototype.wireEvents = function () {\n        var popupElement = this.getPopUpElement();\n        this.delegateMousedownHandler = this.mousedownHandler.bind(this);\n        EventHandler.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        EventHandler.add(popupElement, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'keydown', this.keyBoardHandler, this);\n        EventHandler.add(popupElement, 'keydown', this.keyBoardHandler, this);\n        this.rippleFn = rippleEffect(popupElement, { selector: '.' + classNames.ITEM });\n    };\n    DropDownButton.prototype.keyBoardHandler = function (e) {\n        if (e.target === this.element && (e.keyCode === 9 || (!e.altKey && e.keyCode === 40) || e.keyCode === 38)) {\n            return;\n        }\n        switch (e.keyCode) {\n            case 38:\n            case 40:\n                if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {\n                    this.keyEventHandler(e);\n                }\n                else {\n                    this.upDownKeyHandler(e);\n                }\n                break;\n            case 9:\n            case 13:\n            case 27:\n            case 32:\n                this.keyEventHandler(e);\n                break;\n        }\n    };\n    DropDownButton.prototype.upDownKeyHandler = function (e) {\n        if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {\n            return;\n        }\n        e.preventDefault();\n        var ul = this.getULElement();\n        var defaultIdx = e.keyCode === 40 ? 0 : ul.childElementCount - 1;\n        var liIdx = defaultIdx;\n        var li = null;\n        this.removeCustomSelection();\n        for (var i = 0, len = ul.children.length; i < len; i++) {\n            if (ul.children[i].classList.contains(classNames.FOCUS)) {\n                li = ul.children[i];\n                liIdx = i;\n                li.classList.remove(classNames.FOCUS);\n                e.keyCode === 40 ? liIdx++ : liIdx--;\n                if (liIdx === (e.keyCode === 40 ? ul.childElementCount : -1)) {\n                    liIdx = defaultIdx;\n                }\n            }\n        }\n        li = ul.children[liIdx];\n        liIdx = this.isValidLI(li, liIdx, e.keyCode);\n        if (liIdx !== -1) {\n            addClass([ul.children[liIdx]], classNames.FOCUS);\n            ul.children[liIdx].focus();\n        }\n    };\n    DropDownButton.prototype.removeCustomSelection = function () {\n        var selectedLi = this.getULElement().querySelector('.e-selected');\n        if (selectedLi) {\n            selectedLi.classList.remove('e-selected');\n        }\n    };\n    DropDownButton.prototype.isValidLI = function (li, index, keyCode, count) {\n        if (count === void 0) {\n            count = 0;\n        }\n        if (li.classList.contains(classNames.SEPARATOR) || li.classList.contains(classNames.DISABLED)) {\n            if (index === (keyCode === 40 ? this.items.length - 1 : 0)) {\n                index = keyCode === 40 ? 0 : this.items.length - 1;\n            }\n            else {\n                keyCode === 40 ? index++ : index--;\n            }\n        }\n        li = this.getULElement().children[index];\n        if (li.classList.contains(classNames.SEPARATOR) || li.classList.contains(classNames.DISABLED)) {\n            count++;\n            if (count === this.items.length) {\n                return index = -1;\n            }\n            index = this.isValidLI(li, index, keyCode, count);\n        }\n        return index;\n    };\n    DropDownButton.prototype.keyEventHandler = function (e) {\n        if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {\n            return;\n        }\n        if (e.keyCode !== 9) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {\n            if (!this.canOpen()) {\n                this.closePopup(e, this.element);\n            }\n        }\n        else {\n            this.clickHandler(e);\n        }\n    };\n    DropDownButton.prototype.getLI = function (elem) {\n        return elem.tagName === 'LI' ? elem : closest(elem, 'li');\n    };\n    DropDownButton.prototype.mousedownHandler = function (e) {\n        var trgt = e.target;\n        if (!this.canOpen() && !(closest(trgt, '#' + this.getPopUpElement().id) || closest(trgt, '#' + this.element.id))) {\n            this.closePopup(e);\n        }\n    };\n    DropDownButton.prototype.clickHandler = function (e) {\n        var trgt = e.target;\n        var canOpen = this.canOpen();\n        if (closest(trgt, '#' + this.element.id)) {\n            if (canOpen) {\n                this.openPopUp(e);\n            }\n            else {\n                this.closePopup(e, this.activeElem[0]);\n            }\n        }\n        else {\n            if (closest(trgt, '#' + this.getPopUpElement().id)) {\n                var eventArgs = void 0;\n                var liIdx = void 0;\n                var item = void 0;\n                var li = this.getLI(trgt);\n                if (li) {\n                    liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);\n                    item = this.items[liIdx];\n                    if (item) {\n                        eventArgs = { element: li, item: item };\n                        this.trigger('select', eventArgs);\n                    }\n                    this.closePopup(e, this.activeElem[0]);\n                }\n            }\n        }\n    };\n    DropDownButton.prototype.openPopUp = function (e) {\n        if (e === void 0) {\n            e = null;\n        }\n        if (!this.target) {\n            this.getPopUpElement().appendChild(this.createItems(this.items));\n        }\n        var ul = this.getULElement();\n        var beforeOpenArgs = { element: ul, items: this.items, event: e, cancel: false };\n        this.trigger('beforeOpen', beforeOpenArgs);\n        if (!beforeOpenArgs.cancel) {\n            this.dropDown.show(null, this.element);\n            addClass([this.element], 'e-active');\n            this.element.setAttribute('aria-expanded', 'true');\n            ul.focus();\n            var openArgs = { element: ul, items: this.items };\n            this.trigger('open', openArgs);\n        }\n    };\n    DropDownButton.prototype.closePopup = function (e, focusEle) {\n        if (e === void 0) {\n            e = null;\n        }\n        var ul = this.getULElement();\n        var beforeCloseArgs = { element: ul, items: this.items, event: e, cancel: false };\n        this.trigger('beforeClose', beforeCloseArgs);\n        if (!beforeCloseArgs.cancel) {\n            this.removeCustomSelection();\n            this.dropDown.hide();\n            removeClass(this.activeElem, 'e-active');\n            this.element.setAttribute('aria-expanded', 'false');\n            if (focusEle) {\n                focusEle.focus();\n            }\n            var closeArgs = { element: ul, items: this.items };\n            this.trigger('close', closeArgs);\n            if (!this.target && ul) {\n                detach(ul);\n            }\n        }\n    };\n    DropDownButton.prototype.unWireEvents = function () {\n        EventHandler.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        EventHandler.remove(this.getPopUpElement(), 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'keydown', this.keyBoardHandler);\n        EventHandler.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);\n        this.rippleFn();\n    };\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {DropDownButtonModel} newProp\n     * @param  {DropDownButtonModel} oldProp\n     * @returns void\n     * @private\n     */\n    DropDownButton.prototype.onPropertyChanged = function (newProp, oldProp) {\n        var btnModel = ['content', 'cssClass', 'iconCss', 'iconPosition', 'disabled', 'enableRtl'];\n        this.button.setProperties(getModel(newProp, btnModel));\n        var popupElement = this.getPopUpElement();\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'content':\n                    if (!this.element.querySelector('span.e-caret')) {\n                        this.appendArrowSpan();\n                    }\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.unWireEvents();\n                        if (!this.canOpen()) {\n                            this.closePopup();\n                        }\n                    }\n                    else {\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1) {\n                        var arrowSpan = this.element.querySelector('span.e-caret');\n                        classList(arrowSpan, ['e-icon-bottom'], ['e-icon-right']);\n                    }\n                    if (oldProp.cssClass) {\n                        removeClass([popupElement], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([popupElement], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    popupElement.classList.toggle(classNames.RTL);\n                    break;\n                case 'target':\n                    this.target = newProp.target;\n                    detach(this.getULElement());\n                    popupElement.appendChild(this.getTargetElement());\n                    this.dropDown.content = this.getTargetElement();\n                    break;\n                case 'items':\n                    this.dropDown.refresh();\n                    if (popupElement.classList.contains('e-popup-open')) {\n                        classList(popupElement, ['e-popup-close'], ['e-popup-open']);\n                    }\n                    break;\n            }\n        }\n    };\n    __decorate([\n        Property('')\n    ], DropDownButton.prototype, \"content\", void 0);\n    __decorate([\n        Property('')\n    ], DropDownButton.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(false)\n    ], DropDownButton.prototype, \"disabled\", void 0);\n    __decorate([\n        Property('')\n    ], DropDownButton.prototype, \"iconCss\", void 0);\n    __decorate([\n        Property('Left')\n    ], DropDownButton.prototype, \"iconPosition\", void 0);\n    __decorate([\n        Collection([], Item)\n    ], DropDownButton.prototype, \"items\", void 0);\n    __decorate([\n        Property('')\n    ], DropDownButton.prototype, \"target\", void 0);\n    __decorate([\n        Event()\n    ], DropDownButton.prototype, \"beforeItemRender\", void 0);\n    __decorate([\n        Event()\n    ], DropDownButton.prototype, \"beforeOpen\", void 0);\n    __decorate([\n        Event()\n    ], DropDownButton.prototype, \"beforeClose\", void 0);\n    __decorate([\n        Event()\n    ], DropDownButton.prototype, \"close\", void 0);\n    __decorate([\n        Event()\n    ], DropDownButton.prototype, \"open\", void 0);\n    __decorate([\n        Event()\n    ], DropDownButton.prototype, \"select\", void 0);\n    __decorate([\n        Event()\n    ], DropDownButton.prototype, \"created\", void 0);\n    DropDownButton = __decorate([\n        NotifyPropertyChanges\n    ], DropDownButton);\n    return DropDownButton;\n}(Component));\nexport { DropDownButton };\n",null]}