{"remainingRequest":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-angular-base\\src\\component-base.js","dependencies":[{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-angular-base\\src\\component-base.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * Angular Component Base Module\r\n */\r\nimport { getValue, isUndefined, setValue, isNullOrUndefined, attributes, createElement } from '@syncfusion/ej2-base';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { clearTemplate, registerEvents } from './util';\r\nvar SVG_REG = /^svg|^path|^g/;\r\nvar ComponentBase = /** @class */ /*@__PURE__*/ (function () {\r\n    function ComponentBase() {\r\n        this.isProtectedOnChange = true;\r\n    }\r\n    ComponentBase.prototype.saveChanges = function (key, newValue, oldValue) {\r\n        if (this.isProtectedOnChange) {\r\n            return;\r\n        }\r\n        this.oldProperties[key] = oldValue;\r\n        this.changedProperties[key] = newValue;\r\n        this.finalUpdate();\r\n        // tslint:disable-next-line:no-any\r\n        var changeTime = setTimeout(this.dataBind.bind(this));\r\n        var clearUpdate = function () {\r\n            clearTimeout(changeTime);\r\n        };\r\n        this.finalUpdate = clearUpdate;\r\n    };\r\n    ;\r\n    ComponentBase.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        this.registeredTemplate = {};\r\n        this.ngBoundedEvents = {};\r\n        this.isAngular = true;\r\n        this.tags = this.tags || [];\r\n        this.complexTemplate = this.complexTemplate || [];\r\n        this.tagObjects = [];\r\n        this.ngAttr = this.getAngularAttr(this.element);\r\n        /* istanbul ignore next */\r\n        this.createElement = function (tagName, prop) {\r\n            //tslint:disable-next-line\r\n            var ele = _this.srenderer ? _this.srenderer.createElement(tagName) : createElement(tagName);\r\n            if (typeof (prop) === 'undefined') {\r\n                return ele;\r\n            }\r\n            ele.innerHTML = (prop.innerHTML ? prop.innerHTML : '');\r\n            if (prop.className !== undefined) {\r\n                ele.className = prop.className;\r\n            }\r\n            if (prop.id !== undefined) {\r\n                ele.id = prop.id;\r\n            }\r\n            if (prop.styles !== undefined) {\r\n                ele.setAttribute('style', prop.styles);\r\n            }\r\n            if (_this.ngAttr !== undefined) {\r\n                ele.setAttribute(_this.ngAttr, '');\r\n            }\r\n            if (prop.attrs !== undefined) {\r\n                attributes(ele, prop.attrs);\r\n            }\r\n            return ele;\r\n        };\r\n        for (var _i = 0, _a = this.tags; _i < _a.length; _i++) {\r\n            var tag = _a[_i];\r\n            var tagObject = {\r\n                instance: getValue('child' + tag.substring(0, 1).toUpperCase() + tag.substring(1), this),\r\n                name: tag\r\n            };\r\n            this.tagObjects.push(tagObject);\r\n        }\r\n        var complexTemplates = Object.keys(this);\r\n        complexTemplates = complexTemplates.filter(function (val) {\r\n            return /Ref$/i.test(val) && /\\_/i.test(val);\r\n        });\r\n        for (var _b = 0, complexTemplates_1 = complexTemplates; _b < complexTemplates_1.length; _b++) {\r\n            var tempName = complexTemplates_1[_b];\r\n            var propName = tempName.replace('Ref', '');\r\n            var val = {};\r\n            setValue(propName.replace('_', '.'), getValue(propName, this), val);\r\n            this.setProperties(val, true);\r\n        }\r\n    };\r\n    ComponentBase.prototype.getAngularAttr = function (ele) {\r\n        var attributes = ele.attributes;\r\n        var length = attributes.length;\r\n        var ngAr;\r\n        for (var i = 0; i < length; i++) {\r\n            if (/_ngcontent/g.test(attributes[i].name)) {\r\n                ngAr = attributes[i].name;\r\n            }\r\n        }\r\n        return ngAr;\r\n    };\r\n    ;\r\n    ComponentBase.prototype.ngAfterViewInit = function () {\r\n        var _this = this;\r\n        // Used setTimeout for template binding\r\n        // Refer Link: https://github.com/angular/angular/issues/6005\r\n        setTimeout(function () {\r\n            /* istanbul ignore else  */\r\n            if (typeof window !== 'undefined') {\r\n                _this.appendTo(_this.element);\r\n            }\r\n        });\r\n    };\r\n    ComponentBase.prototype.ngOnDestroy = function () {\r\n        /* istanbul ignore else  */\r\n        if (typeof window !== 'undefined' && this.element.classList.contains('e-control')) {\r\n            this.destroy();\r\n            this.clearTemplate(null);\r\n        }\r\n    };\r\n    //tslint:disable-next-line\r\n    ComponentBase.prototype.clearTemplate = function (templateNames, index) {\r\n        clearTemplate(this, templateNames, index);\r\n    };\r\n    ;\r\n    ComponentBase.prototype.ngAfterContentChecked = function () {\r\n        for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\r\n            var tagObject = _a[_i];\r\n            if (!isUndefined(tagObject.instance) &&\r\n                (tagObject.instance.isInitChanges || tagObject.instance.hasChanges || tagObject.instance.hasNewChildren)) {\r\n                if (tagObject.instance.isInitChanges) {\r\n                    var propObj = {};\r\n                    propObj[tagObject.name] = tagObject.instance.getProperties();\r\n                    this.setProperties(propObj, tagObject.instance.isInitChanges);\r\n                }\r\n                else {\r\n                    for (var _b = 0, _c = tagObject.instance.list; _b < _c.length; _b++) {\r\n                        var list = _c[_b];\r\n                        if (list.hasChanges) {\r\n                            var curIndex = tagObject.instance.list.indexOf(list);\r\n                            var curChild = getValue(tagObject.name, this)[curIndex];\r\n                            if (curChild !== undefined) {\r\n                                curChild.setProperties(list.getProperties());\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    ComponentBase.prototype.registerEvents = function (eventList) {\r\n        registerEvents(eventList, this);\r\n    };\r\n    ComponentBase.prototype.twoWaySetter = function (newVal, prop) {\r\n        var oldVal = getValue(prop, this.properties);\r\n        if (oldVal === newVal) {\r\n            return;\r\n        }\r\n        this.saveChanges(prop, newVal, oldVal);\r\n        setValue(prop, (isNullOrUndefined(newVal) ? null : newVal), this.properties);\r\n        getValue(prop + 'Change', this).emit(newVal);\r\n    };\r\n    ComponentBase.prototype.addTwoWay = function (propList) {\r\n        var _this = this;\r\n        var _loop_1 = function (prop) {\r\n            getValue(prop, this_1);\r\n            Object.defineProperty(this_1, prop, {\r\n                get: function () {\r\n                    return getValue(prop, _this.properties);\r\n                },\r\n                set: function (newVal) { return _this.twoWaySetter(newVal, prop); }\r\n            });\r\n            setValue(prop + 'Change', new EventEmitter(), this_1);\r\n        };\r\n        var this_1 = this;\r\n        for (var _i = 0, propList_1 = propList; _i < propList_1.length; _i++) {\r\n            var prop = propList_1[_i];\r\n            _loop_1(prop);\r\n        }\r\n    };\r\n    ComponentBase.prototype.addEventListener = function (eventName, handler) {\r\n        var eventObj = getValue(eventName, this);\r\n        if (!isUndefined(eventObj)) {\r\n            if (!this.ngBoundedEvents[eventName]) {\r\n                this.ngBoundedEvents[eventName] = new Map();\r\n            }\r\n            this.ngBoundedEvents[eventName].set(handler, eventObj.subscribe(handler));\r\n        }\r\n    };\r\n    ComponentBase.prototype.removeEventListener = function (eventName, handler) {\r\n        var eventObj = getValue(eventName, this);\r\n        if (!isUndefined(eventObj)) {\r\n            this.ngBoundedEvents[eventName].get(handler).unsubscribe();\r\n        }\r\n    };\r\n    ComponentBase.prototype.trigger = function (eventName, eventArgs) {\r\n        var eventObj = getValue(eventName, this);\r\n        var prevDetection = this.isProtectedOnChange;\r\n        this.isProtectedOnChange = false;\r\n        if (eventArgs) {\r\n            eventArgs.name = eventName;\r\n        }\r\n        if (!isUndefined(eventObj)) {\r\n            eventObj.next(eventArgs);\r\n        }\r\n        var localEventObj = getValue('local' + eventName.charAt(0).toUpperCase() + eventName.slice(1), this);\r\n        if (!isUndefined(localEventObj)) {\r\n            localEventObj.call(this, eventArgs);\r\n        }\r\n        this.isProtectedOnChange = prevDetection;\r\n    };\r\n    return ComponentBase;\r\n}());\r\nexport { ComponentBase };\r\n",null]}