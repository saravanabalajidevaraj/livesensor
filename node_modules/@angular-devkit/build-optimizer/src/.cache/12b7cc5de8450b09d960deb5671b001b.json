{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\child-property.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\child-property.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { getValue, setValue, merge } from './util';\r\nimport { Base } from './base';\r\n/**\r\n * To detect the changes for inner properties.\r\n * @private\r\n */\r\nvar ChildProperty = /** @class */ /*@__PURE__*/ (function () {\r\n    function ChildProperty(parent, propName, defaultValue, isArray) {\r\n        this.properties = {};\r\n        this.changedProperties = {};\r\n        this.childChangedProperties = {};\r\n        this.oldProperties = {};\r\n        // tslint:disable-next-line:no-empty\r\n        this.finalUpdate = function () { };\r\n        this.callChildDataBind = getValue('callChildDataBind', Base);\r\n        this.parentObj = parent;\r\n        this.controlParent = this.parentObj.controlParent || this.parentObj;\r\n        this.propName = propName;\r\n        this.setProperties(defaultValue, true);\r\n        this.isParentArray = isArray;\r\n    }\r\n    /**\r\n     * Updates the property changes\r\n     * @param {boolean} val\r\n     * @param {string} propName\r\n     * @returns {void}\r\n     */\r\n    ChildProperty.prototype.updateChange = function (val, propName) {\r\n        if (val === true) {\r\n            this.parentObj.childChangedProperties[propName] = val;\r\n        }\r\n        else {\r\n            delete this.parentObj.childChangedProperties[propName];\r\n        }\r\n        if (this.parentObj.updateChange) {\r\n            this.parentObj.updateChange(val, this.parentObj.propName);\r\n        }\r\n    };\r\n    /**\r\n     * Updates time out duration\r\n     */\r\n    ChildProperty.prototype.updateTimeOut = function () {\r\n        if (this.parentObj.updateTimeOut) {\r\n            this.parentObj.finalUpdate();\r\n            this.parentObj.updateTimeOut();\r\n        }\r\n        else {\r\n            var changeTime_1 = setTimeout(this.parentObj.dataBind.bind(this.parentObj));\r\n            var clearUpdate = function () {\r\n                clearTimeout(changeTime_1);\r\n            };\r\n            this.finalUpdate = clearUpdate;\r\n        }\r\n    };\r\n    /**\r\n     * Clears changed properties\r\n     */\r\n    ChildProperty.prototype.clearChanges = function () {\r\n        this.finalUpdate();\r\n        this.updateChange(false, this.propName);\r\n        this.oldProperties = {};\r\n        this.changedProperties = {};\r\n    };\r\n    /**\r\n     * Set property changes\r\n     * @param {Object} prop\r\n     * @param {boolean} muteOnChange\r\n     * {void}\r\n     */\r\n    ChildProperty.prototype.setProperties = function (prop, muteOnChange) {\r\n        if (muteOnChange === true) {\r\n            merge(this, prop);\r\n            this.updateChange(false, this.propName);\r\n            this.clearChanges();\r\n        }\r\n        else {\r\n            merge(this, prop);\r\n        }\r\n    };\r\n    /**\r\n     * Binds data\r\n     */\r\n    ChildProperty.prototype.dataBind = function () {\r\n        this.callChildDataBind(this.childChangedProperties, this);\r\n        if (this.isParentArray) {\r\n            var curIndex = this.parentObj[this.propName].indexOf(this);\r\n            if (Object.keys(this.changedProperties).length) {\r\n                setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);\r\n                setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);\r\n            }\r\n        }\r\n        else {\r\n            this.parentObj.changedProperties[this.propName] = this.changedProperties;\r\n            this.parentObj.oldProperties[this.propName] = this.oldProperties;\r\n        }\r\n        this.clearChanges();\r\n    };\r\n    /**\r\n     * Saves changes to newer values\r\n     * @param {string} key\r\n     * @param {Object} newValue\r\n     * @param {Object} oldValue\r\n     * @returns {void}\r\n     */\r\n    ChildProperty.prototype.saveChanges = function (key, newValue, oldValue) {\r\n        if (this.controlParent.isProtectedOnChange) {\r\n            return;\r\n        }\r\n        this.oldProperties[key] = oldValue;\r\n        this.changedProperties[key] = newValue;\r\n        this.updateChange(true, this.propName);\r\n        this.finalUpdate();\r\n        this.updateTimeOut();\r\n    };\r\n    return ChildProperty;\r\n}());\r\nexport { ChildProperty };\r\n",null]}