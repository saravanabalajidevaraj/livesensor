{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\module-loader.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\module-loader.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * Module loading operations\r\n */\r\nimport { createInstance, setValue, getValue, deleteObject } from './util';\r\nvar MODULE_SUFFIX = 'Module';\r\nvar ModuleLoader = /** @class */ /*@__PURE__*/ (function () {\r\n    function ModuleLoader(parent) {\r\n        this.loadedModules = [];\r\n        this.parent = parent;\r\n    }\r\n    ;\r\n    /**\r\n     * Inject required modules in component library\r\n     * @return {void}\r\n     * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required\r\n     * @param {Function[]} moduleList - Array of modules to be injected from sample side\r\n     */\r\n    ModuleLoader.prototype.inject = function (requiredModules, moduleList) {\r\n        var reqLength = requiredModules.length;\r\n        if (reqLength === 0) {\r\n            this.clean();\r\n            return;\r\n        }\r\n        if (this.loadedModules.length) {\r\n            this.clearUnusedModule(requiredModules);\r\n        }\r\n        for (var i = 0; i < reqLength; i++) {\r\n            var modl = requiredModules[i];\r\n            for (var _i = 0, moduleList_1 = moduleList; _i < moduleList_1.length; _i++) {\r\n                var module = moduleList_1[_i];\r\n                var modName = modl.member;\r\n                if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {\r\n                    var moduleObject = createInstance(module, modl.args);\r\n                    var memberName = this.getMemberName(modName);\r\n                    if (modl.isProperty) {\r\n                        setValue(memberName, module, this.parent);\r\n                    }\r\n                    else {\r\n                        setValue(memberName, moduleObject, this.parent);\r\n                    }\r\n                    var loadedModule = modl;\r\n                    loadedModule.member = memberName;\r\n                    this.loadedModules.push(loadedModule);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * To remove the created object while destroying the control\r\n     * @return {void}\r\n     */\r\n    ModuleLoader.prototype.clean = function () {\r\n        for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {\r\n            var modules = _a[_i];\r\n            if (!modules.isProperty) {\r\n                getValue(modules.member, this.parent).destroy();\r\n            }\r\n        }\r\n        this.loadedModules = [];\r\n    };\r\n    /**\r\n     * Removes all unused modules\r\n     * @param {ModuleDeclaration[]} moduleList\r\n     * @returns {void}\r\n     */\r\n    ModuleLoader.prototype.clearUnusedModule = function (moduleList) {\r\n        var _this = this;\r\n        var usedModules = moduleList.map(function (arg) { return _this.getMemberName(arg.member); });\r\n        var removableModule = this.loadedModules.filter(function (module) {\r\n            return usedModules.indexOf(module.member) === -1;\r\n        });\r\n        for (var _i = 0, removableModule_1 = removableModule; _i < removableModule_1.length; _i++) {\r\n            var mod = removableModule_1[_i];\r\n            if (!mod.isProperty) {\r\n                getValue(mod.member, this.parent).destroy();\r\n            }\r\n            this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);\r\n            deleteObject(this.parent, mod.member);\r\n        }\r\n    };\r\n    /**\r\n     * To get the name of the member.\r\n     * @param {string} name\r\n     * @returns {string}\r\n     */\r\n    ModuleLoader.prototype.getMemberName = function (name) {\r\n        return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;\r\n    };\r\n    /**\r\n     * Returns boolean based on whether the module specified is loaded or not\r\n     * @param {string} modName\r\n     * @returns {boolean}\r\n     */\r\n    ModuleLoader.prototype.isModuleLoaded = function (modName) {\r\n        for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {\r\n            var mod = _a[_i];\r\n            if (mod.member === this.getMemberName(modName)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return ModuleLoader;\r\n}());\r\nexport { ModuleLoader };\r\n",null]}