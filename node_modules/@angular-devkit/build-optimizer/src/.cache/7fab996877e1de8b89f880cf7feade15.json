{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\intl\\parser-base.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\intl\\parser-base.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * Parser\r\n */\r\nvar defaultNumberingSystem = {\r\n    'latn': {\r\n        '_digits': '0123456789',\r\n        '_type': 'numeric'\r\n    }\r\n};\r\nimport { isUndefined, getValue } from '../util';\r\nvar latnRegex = /^[0-9]*$/;\r\nvar defaultNumberSymbols = {\r\n    'decimal': '.',\r\n    'group': ',',\r\n    'percentSign': '%',\r\n    'plusSign': '+',\r\n    'minusSign': '-',\r\n    'infinity': 'âˆž',\r\n    'nan': 'NaN',\r\n    'exponential': 'E'\r\n};\r\nvar latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n/**\r\n * Interface for parser base\r\n * @private\r\n */\r\nvar ParserBase = /** @class */ /*@__PURE__*/ (function () {\r\n    function ParserBase() {\r\n    }\r\n    /**\r\n     * Returns the cldr object for the culture specifies\r\n     * @param {Object} obj - Specifies the object from which culture object to be acquired.\r\n     * @param {string} cName - Specifies the culture name.\r\n     * @returns {Object}\r\n     */\r\n    ParserBase.getMainObject = function (obj, cName) {\r\n        return getValue('main.' + cName, obj);\r\n    };\r\n    /**\r\n     * Returns the numbering system object from given cldr data.\r\n     * @param {Object} obj - Specifies the object from which number system is acquired.\r\n     * @returns {Object}\r\n     */\r\n    ParserBase.getNumberingSystem = function (obj) {\r\n        return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;\r\n    };\r\n    /**\r\n     * Returns the reverse of given object keys or keys specified.\r\n     * @param {Object} prop - Specifies the object to be reversed.\r\n     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.\r\n     * @returns {Object}\r\n     */\r\n    ParserBase.reverseObject = function (prop, keys) {\r\n        var propKeys = keys || Object.keys(prop);\r\n        var res = {};\r\n        for (var _i = 0, propKeys_1 = propKeys; _i < propKeys_1.length; _i++) {\r\n            var key = propKeys_1[_i];\r\n            /* tslint:disable no-any */\r\n            if (!res.hasOwnProperty(prop[key])) {\r\n                res[prop[key]] = key;\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns the symbol regex by skipping the escape sequence.\r\n     * @param {string[]} props - Specifies the array values to be skipped.\r\n     * @returns {RegExp}\r\n     */\r\n    ParserBase.getSymbolRegex = function (props) {\r\n        var regexStr = props.map(function (str) {\r\n            return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\r\n        }).join('|');\r\n        return new RegExp(regexStr, 'g');\r\n    };\r\n    ParserBase.getSymbolMatch = function (prop) {\r\n        var matchKeys = Object.keys(defaultNumberSymbols);\r\n        var ret = {};\r\n        for (var _i = 0, matchKeys_1 = matchKeys; _i < matchKeys_1.length; _i++) {\r\n            var key = matchKeys_1[_i];\r\n            ret[prop[key]] = defaultNumberSymbols[key];\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * Returns regex string for provided value\r\n     * @param {string} val\r\n     * @returns {string}\r\n     */\r\n    ParserBase.constructRegex = function (val) {\r\n        var len = val.length;\r\n        var ret = '';\r\n        for (var i = 0; i < len; i++) {\r\n            if (i !== len - 1) {\r\n                ret += val[i] + '|';\r\n            }\r\n            else {\r\n                ret += val[i];\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * Returns the replaced value of matching regex and obj mapper.\r\n     * @param {string} value - Specifies the  values to be replaced.\r\n     * @param {RegExp} regex - Specifies the  regex to search.\r\n     * @param {Object} obj - Specifies the  object matcher to be replace value parts.\r\n     * @returns {string}\r\n     */\r\n    ParserBase.convertValueParts = function (value, regex, obj) {\r\n        return value.replace(regex, function (str) {\r\n            return obj[str];\r\n        });\r\n    };\r\n    /**\r\n     * Returns default numbering system object for formatting from cldr data\r\n     * @param {Object} obj\r\n     * @returns {NumericObject}\r\n     */\r\n    ParserBase.getDefaultNumberingSystem = function (obj) {\r\n        var ret = {};\r\n        ret.obj = getValue('numbers', obj);\r\n        ret.nSystem = getValue('defaultNumberingSystem', ret.obj);\r\n        return ret;\r\n    };\r\n    /**\r\n     * Returns the replaced value of matching regex and obj mapper.\r\n     */\r\n    ParserBase.getCurrentNumericOptions = function (curObj, numberSystem, needSymbols) {\r\n        var ret = {};\r\n        var cur = this.getDefaultNumberingSystem(curObj);\r\n        if (!isUndefined(cur.nSystem)) {\r\n            var digits = getValue(cur.nSystem + '._digits', numberSystem);\r\n            if (!isUndefined(digits)) {\r\n                ret.numericPair = this.reverseObject(digits, latnNumberSystem);\r\n                ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');\r\n                ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';\r\n                if (needSymbols) {\r\n                    ret.numericRegex = digits[0] + '-' + digits[9];\r\n                    ret.symbolNumberSystem = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\r\n                    ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);\r\n                    ret.numberSystem = cur.nSystem;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * Returns number mapper object for the provided cldr data\r\n     * @param {Object} curObj\r\n     * @param {Object} numberSystem\r\n     * @param {boolean} isNumber\r\n     * @returns {NumberMapper}\r\n     */\r\n    ParserBase.getNumberMapper = function (curObj, numberSystem, isNumber) {\r\n        var ret = { mapper: {} };\r\n        var cur = this.getDefaultNumberingSystem(curObj);\r\n        if (!isUndefined(cur.nSystem)) {\r\n            ret.numberSystem = cur.nSystem;\r\n            ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\r\n            ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);\r\n            var digits = getValue(cur.nSystem + '._digits', numberSystem);\r\n            if (!isUndefined(digits)) {\r\n                for (var _i = 0, latnNumberSystem_1 = latnNumberSystem; _i < latnNumberSystem_1.length; _i++) {\r\n                    var i = latnNumberSystem_1[_i];\r\n                    ret.mapper[i] = digits[i];\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    ParserBase.nPair = 'numericPair';\r\n    ParserBase.nRegex = 'numericRegex';\r\n    ParserBase.numberingSystems = defaultNumberingSystem;\r\n    return ParserBase;\r\n}());\r\nexport { ParserBase };\r\n",null]}