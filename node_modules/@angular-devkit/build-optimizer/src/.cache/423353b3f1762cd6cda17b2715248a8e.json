{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\browser.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\browser.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { isUndefined } from './util';\r\nvar REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;\r\nvar REGX_IE = /msie|trident/i;\r\nvar REGX_IE11 = /Trident\\/7\\./;\r\nvar REGX_IOS = /(ipad|iphone|ipod touch)/i;\r\nvar REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\\d|(ipad|iphone|ipod touch);.*os 8_\\d/i;\r\nvar REGX_ANDROID = /android/i;\r\nvar REGX_WINDOWS = /trident|windows phone|edge/i;\r\nvar REGX_VERSION = /(version)[ \\/]([\\w.]+)/i;\r\nvar REGX_BROWSER = {\r\n    OPERA: /(opera|opr)(?:.*version|)[ \\/]([\\w.]+)/i,\r\n    EDGE: /(edge)(?:.*version|)[ \\/]([\\w.]+)/i,\r\n    CHROME: /(chrome|crios)[ \\/]([\\w.]+)/i,\r\n    PANTHOMEJS: /(phantomjs)[ \\/]([\\w.]+)/i,\r\n    SAFARI: /(safari)[ \\/]([\\w.]+)/i,\r\n    WEBKIT: /(webkit)[ \\/]([\\w.]+)/i,\r\n    MSIE: /(msie|trident) ([\\w.]+)/i,\r\n    MOZILLA: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\r\n};\r\n/* istanbul ignore else  */\r\nif (typeof window !== 'undefined') {\r\n    window.browserDetails = window.browserDetails || {};\r\n}\r\n/**\r\n * Get configuration details for Browser\r\n * @private\r\n */\r\nvar Browser = /** @class */ /*@__PURE__*/ (function () {\r\n    function Browser() {\r\n    }\r\n    Browser.extractBrowserDetail = function () {\r\n        var browserInfo = { culture: {} };\r\n        var keys = Object.keys(REGX_BROWSER);\r\n        var clientInfo = [];\r\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n            var key = keys_1[_i];\r\n            clientInfo = Browser.userAgent.match(REGX_BROWSER[key]);\r\n            if (clientInfo) {\r\n                browserInfo.name = (clientInfo[1].toLowerCase() === 'opr' ? 'opera' : clientInfo[1].toLowerCase());\r\n                browserInfo.name = (clientInfo[1].toLowerCase() === 'crios' ? 'chrome' : browserInfo.name);\r\n                browserInfo.version = clientInfo[2];\r\n                browserInfo.culture.name = browserInfo.culture.language = navigator.language;\r\n                if (!!Browser.userAgent.match(REGX_IE11)) {\r\n                    browserInfo.name = 'msie';\r\n                    break;\r\n                }\r\n                var version = Browser.userAgent.match(REGX_VERSION);\r\n                if (browserInfo.name === 'safari' && version) {\r\n                    browserInfo.version = version[2];\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return browserInfo;\r\n    };\r\n    /**\r\n     * To get events from the browser\r\n     * @param {string} event - type of event triggered.\r\n     * @returns {Boolean}\r\n     */\r\n    Browser.getEvent = function (event) {\r\n        // tslint:disable-next-line:no-any\r\n        var events = {\r\n            start: {\r\n                isPointer: 'pointerdown', isTouch: 'touchstart', isDevice: 'mousedown'\r\n            },\r\n            move: {\r\n                isPointer: 'pointermove', isTouch: 'touchmove', isDevice: 'mousemove'\r\n            },\r\n            end: {\r\n                isPointer: 'pointerup', isTouch: 'touchend', isDevice: 'mouseup'\r\n            },\r\n            cancel: {\r\n                isPointer: 'pointercancel', isTouch: 'touchcancel', isDevice: 'mouseleave'\r\n            }\r\n        };\r\n        return (Browser.isPointer ? events[event].isPointer :\r\n            (Browser.isTouch ? events[event].isTouch + (!Browser.isDevice ? ' ' + events[event].isDevice : '')\r\n                : events[event].isDevice));\r\n    };\r\n    /**\r\n     * To get the Touch start event from browser\r\n     * @returns {string}\r\n     */\r\n    Browser.getTouchStartEvent = function () {\r\n        return Browser.getEvent('start');\r\n    };\r\n    /**\r\n     * To get the Touch end event from browser\r\n     * @returns {string}\r\n     */\r\n    Browser.getTouchEndEvent = function () {\r\n        return Browser.getEvent('end');\r\n    };\r\n    /**\r\n     * To get the Touch move event from browser\r\n     * @returns {string}\r\n     */\r\n    Browser.getTouchMoveEvent = function () {\r\n        return Browser.getEvent('move');\r\n    };\r\n    /**\r\n     * To cancel the touch event from browser\r\n     * @returns {string}\r\n     */\r\n    Browser.getTouchCancelEvent = function () {\r\n        return Browser.getEvent('cancel');\r\n    };\r\n    /**\r\n     * To get the value based on provided key and regX\r\n     * @param {string} key\r\n     * @param {RegExp} regX\r\n     * @returns {Object}\r\n     */\r\n    Browser.getValue = function (key, regX) {\r\n        var browserDetails = window.browserDetails;\r\n        if ('undefined' === typeof browserDetails[key]) {\r\n            return browserDetails[key] = regX.test(Browser.userAgent);\r\n        }\r\n        return browserDetails[key];\r\n    };\r\n    Object.defineProperty(Browser, \"userAgent\", {\r\n        get: function () {\r\n            return Browser.uA;\r\n        },\r\n        //Properties \r\n        /**\r\n         * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.\r\n         * Also we can set our own userAgent.\r\n         */\r\n        set: function (uA) {\r\n            Browser.uA = uA;\r\n            window.browserDetails = {};\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"info\", {\r\n        //Read Only Properties\r\n        /**\r\n         * Property is to get the browser information like Name, Version and Language\r\n         * @returns BrowserInfo\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.info)) {\r\n                return window.browserDetails.info = Browser.extractBrowserDetail();\r\n            }\r\n            return window.browserDetails.info;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isIE\", {\r\n        /**\r\n         * Property is to get whether the userAgent is based IE.\r\n         */\r\n        get: function () {\r\n            return Browser.getValue('isIE', REGX_IE);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isTouch\", {\r\n        /**\r\n         * Property is to get whether the browser has touch support.\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.isTouch)) {\r\n                return window.browserDetails.isTouch = ('ontouchstart' in window);\r\n            }\r\n            return window.browserDetails.isTouch;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isPointer\", {\r\n        /**\r\n         * Property is to get whether the browser has Pointer support.\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.isPointer)) {\r\n                return window.browserDetails.isPointer = ('pointerEnabled' in window.navigator);\r\n            }\r\n            return window.browserDetails.isPointer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isMSPointer\", {\r\n        /**\r\n         * Property is to get whether the browser has MSPointer support.\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.isMSPointer)) {\r\n                return window.browserDetails.isMSPointer = ('msPointerEnabled' in window.navigator);\r\n            }\r\n            return window.browserDetails.isMSPointer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isDevice\", {\r\n        /**\r\n         * Property is to get whether the userAgent is device based.\r\n         */\r\n        get: function () {\r\n            return Browser.getValue('isDevice', REGX_MOBILE);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isIos\", {\r\n        /**\r\n         * Property is to get whether the userAgent is IOS.\r\n         */\r\n        get: function () {\r\n            return Browser.getValue('isIos', REGX_IOS);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isIos7\", {\r\n        /**\r\n         * Property is to get whether the userAgent is Ios7.\r\n         */\r\n        get: function () {\r\n            return Browser.getValue('isIos7', REGX_IOS7);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isAndroid\", {\r\n        /**\r\n         * Property is to get whether the userAgent is Android.\r\n         */\r\n        get: function () {\r\n            return Browser.getValue('isAndroid', REGX_ANDROID);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isWebView\", {\r\n        /**\r\n         * Property is to identify whether application ran in web view.\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.isWebView)) {\r\n                window.browserDetails.isWebView = !(isUndefined(window.cordova) && isUndefined(window.PhoneGap)\r\n                    && isUndefined(window.phonegap) && window.forge !== 'object');\r\n                return window.browserDetails.isWebView;\r\n            }\r\n            return window.browserDetails.isWebView;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"isWindows\", {\r\n        /**\r\n         * Property is to get whether the userAgent is Windows.\r\n         */\r\n        get: function () {\r\n            return Browser.getValue('isWindows', REGX_WINDOWS);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"touchStartEvent\", {\r\n        /**\r\n         * Property is to get the touch start event. It returns event name based on browser.\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.touchStartEvent)) {\r\n                return window.browserDetails.touchStartEvent = Browser.getTouchStartEvent();\r\n            }\r\n            return window.browserDetails.touchStartEvent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"touchMoveEvent\", {\r\n        /**\r\n         * Property is to get the touch move event. It returns event name based on browser.\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.touchMoveEvent)) {\r\n                return window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent();\r\n            }\r\n            return window.browserDetails.touchMoveEvent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"touchEndEvent\", {\r\n        /**\r\n         * Property is to get the touch end event. It returns event name based on browser.\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.touchEndEvent)) {\r\n                return window.browserDetails.touchEndEvent = Browser.getTouchEndEvent();\r\n            }\r\n            return window.browserDetails.touchEndEvent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Browser, \"touchCancelEvent\", {\r\n        /**\r\n         * Property is to cancel the touch end event.\r\n         */\r\n        get: function () {\r\n            if (isUndefined(window.browserDetails.touchCancelEvent)) {\r\n                return window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent();\r\n            }\r\n            return window.browserDetails.touchCancelEvent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /* istanbul ignore next */\r\n    Browser.uA = typeof navigator !== 'undefined' ? navigator.userAgent : '';\r\n    return Browser;\r\n}());\r\nexport { Browser };\r\n",null]}