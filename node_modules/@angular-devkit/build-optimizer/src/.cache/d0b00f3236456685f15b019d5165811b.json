{"remainingRequest":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-base\\src\\intl\\date-formatter.js","dependencies":[{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-base\\src\\intl\\date-formatter.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { ParserBase as parser } from './parser-base';\r\nimport { IntlBase as base } from './intl-base';\r\nimport { isUndefined, throwError, getValue } from '../util';\r\nimport { HijriParser } from '../hijri-parser';\r\nimport { isNullOrUndefined } from '../util';\r\nvar abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLL|EEEEE|EEEE|E|K|ccc|G+|z+/gi;\r\nvar standalone = 'stand-alone';\r\nvar weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\r\nexport var basicPatterns = ['short', 'medium', 'long', 'full'];\r\nvar timeSetter = {\r\n    m: 'getMinutes',\r\n    h: 'getHours',\r\n    H: 'getHours',\r\n    s: 'getSeconds',\r\n    d: 'getDate',\r\n};\r\nexport var datePartMatcher = {\r\n    'M': 'month',\r\n    'd': 'day',\r\n    'E': 'weekday',\r\n    'c': 'weekday',\r\n    'y': 'year',\r\n    'm': 'minute',\r\n    'h': 'hour',\r\n    'H': 'hour',\r\n    's': 'second',\r\n    'L': 'month',\r\n    'a': 'designator',\r\n    'z': 'timeZone',\r\n    'Z': 'timeZone',\r\n    'G': 'era'\r\n};\r\nvar timeSeparator = 'timeSeparator';\r\n/**\r\n * Date Format is a framework provides support for date formatting.\r\n * @private\r\n */\r\nvar DateFormat = /** @class */ /*@__PURE__*/ (function () {\r\n    function DateFormat() {\r\n    }\r\n    /**\r\n     * Returns the formatter function for given skeleton.\r\n     * @param {string} -  Specifies the culture name to be which formatting.\r\n     * @param {DateFormatOptions} - Specific the format in which date  will format.\r\n     * @param {cldr} - Specifies the global cldr data collection.\r\n     * @return Function.\r\n     */\r\n    DateFormat.dateFormat = function (culture, option, cldr) {\r\n        var _this = this;\r\n        var dependable = base.getDependables(cldr, culture, option.calendar);\r\n        var formatOptions = { isIslamic: base.islamicRegex.test(option.calendar) };\r\n        var resPattern = option.format || base.getResultantPattern(option.skeleton, dependable.dateObject, option.type);\r\n        formatOptions.dateSeperator = base.getDateSeparator(dependable.dateObject);\r\n        if (isUndefined(resPattern)) {\r\n            throwError('Format options or type given must be invalid');\r\n        }\r\n        else {\r\n            formatOptions.pattern = resPattern;\r\n            formatOptions.numMapper = parser.getNumberMapper(dependable.parserObject, parser.getNumberingSystem(cldr));\r\n            var patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\r\n            for (var _i = 0, patternMatch_1 = patternMatch; _i < patternMatch_1.length; _i++) {\r\n                var str = patternMatch_1[_i];\r\n                var len = str.length;\r\n                var char = str[0];\r\n                if (char === 'K') {\r\n                    char = 'h';\r\n                }\r\n                /* tslint:disable no-any */\r\n                var charKey = datePartMatcher[char];\r\n                switch (char) {\r\n                    case 'E':\r\n                    case 'c':\r\n                        formatOptions.weekday = dependable.dateObject[base.days][standalone][base.monthIndex[len]];\r\n                        break;\r\n                    case 'M':\r\n                    case 'L':\r\n                        formatOptions.month = dependable.dateObject[base.month][standalone][base.monthIndex[len]];\r\n                        break;\r\n                    case 'a':\r\n                        formatOptions.designator = getValue('dayPeriods.format.wide', dependable.dateObject);\r\n                        break;\r\n                    case 'G':\r\n                        var eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\r\n                        formatOptions.era = getValue('eras.' + eText, dependable.dateObject);\r\n                        break;\r\n                    case 'z':\r\n                        formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return function (value) {\r\n            if (isNaN(value.getDate())) {\r\n                return null;\r\n            }\r\n            return _this.intDateFormatter(value, formatOptions);\r\n        };\r\n    };\r\n    /**\r\n     * Returns formatted date string based on options passed.\r\n     * @param {Date} value\r\n     * @param {FormatOptions} options\r\n     */\r\n    DateFormat.intDateFormatter = function (value, options) {\r\n        var pattern = options.pattern;\r\n        var ret = '';\r\n        var matches = pattern.match(base.dateParseRegex);\r\n        var dObject = this.getCurrentDateValue(value, options.isIslamic);\r\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\r\n            var match = matches_1[_i];\r\n            var length_1 = match.length;\r\n            var char = match[0];\r\n            if (char === 'K') {\r\n                char = 'h';\r\n            }\r\n            var curval = void 0;\r\n            var isNumber = void 0;\r\n            var processNumber = void 0;\r\n            var curstr = '';\r\n            switch (char) {\r\n                case 'M':\r\n                case 'L':\r\n                    curval = dObject.month;\r\n                    if (length_1 > 2) {\r\n                        ret += options.month[curval];\r\n                    }\r\n                    else {\r\n                        isNumber = true;\r\n                    }\r\n                    break;\r\n                case 'E':\r\n                case 'c':\r\n                    ret += options.weekday[weekdayKey[value.getDay()]];\r\n                    break;\r\n                case 'H':\r\n                case 'h':\r\n                case 'm':\r\n                case 's':\r\n                case 'd':\r\n                    isNumber = true;\r\n                    if (char === 'd') {\r\n                        curval = dObject.date;\r\n                    }\r\n                    else {\r\n                        curval = value[timeSetter[char]]();\r\n                    }\r\n                    if (char === 'h') {\r\n                        curval = curval % 12 || 12;\r\n                    }\r\n                    break;\r\n                case 'y':\r\n                    processNumber = true;\r\n                    curstr += dObject.year;\r\n                    if (length_1 === 2) {\r\n                        curstr = curstr.substr(curstr.length - 2);\r\n                    }\r\n                    break;\r\n                case 'a':\r\n                    var desig = value.getHours() < 12 ? 'am' : 'pm';\r\n                    ret += options.designator[desig];\r\n                    break;\r\n                case 'G':\r\n                    var dec = value.getFullYear() < 0 ? 0 : 1;\r\n                    var retu = options.era[dec];\r\n                    if (isNullOrUndefined(retu)) {\r\n                        retu = options.era[dec ? 0 : 1];\r\n                    }\r\n                    ret += retu || '';\r\n                    break;\r\n                case '\\'':\r\n                    ret += (match === '\\'\\'') ? '\\'' : match.replace(/\\'/g, '');\r\n                    break;\r\n                case 'z':\r\n                    var timezone = value.getTimezoneOffset();\r\n                    var pattern_1 = (length_1 < 4) ? '+H;-H' : options.timeZone.hourFormat;\r\n                    pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator);\r\n                    if (timezone === 0) {\r\n                        ret += options.timeZone.gmtZeroFormat;\r\n                    }\r\n                    else {\r\n                        processNumber = true;\r\n                        curstr = this.getTimeZoneValue(timezone, pattern_1);\r\n                    }\r\n                    curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\r\n                    break;\r\n                case ':':\r\n                    ret += options.numMapper.numberSymbols[timeSeparator];\r\n                    /* tslint:enable no-any */\r\n                    break;\r\n                case '/':\r\n                    ret += options.dateSeperator;\r\n                    break;\r\n                default:\r\n                    ret += match;\r\n            }\r\n            if (isNumber) {\r\n                processNumber = true;\r\n                curstr = this.checkTwodigitNumber(curval, length_1);\r\n            }\r\n            if (processNumber) {\r\n                ret += parser.convertValueParts(curstr, base.latnParseRegex, options.numMapper.mapper);\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    DateFormat.getCurrentDateValue = function (value, isIslamic) {\r\n        if (isIslamic) {\r\n            return HijriParser.getHijriDate(value);\r\n        }\r\n        return { year: value.getFullYear(), month: value.getMonth() + 1, date: value.getDate() };\r\n    };\r\n    /**\r\n     * Returns two digit numbers for given value and length\r\n     */\r\n    DateFormat.checkTwodigitNumber = function (val, len) {\r\n        var ret = val + '';\r\n        if (len === 2 && ret.length !== 2) {\r\n            return '0' + ret;\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * Returns the value of the Time Zone.\r\n     * @param {number} tVal\r\n     * @param {string} pattern\r\n     * @private\r\n     */\r\n    DateFormat.getTimeZoneValue = function (tVal, pattern) {\r\n        var _this = this;\r\n        var splt = pattern.split(';');\r\n        var curPattern = splt[tVal > 0 ? 1 : 0];\r\n        var no = Math.abs(tVal);\r\n        return curPattern = curPattern.replace(/HH?|mm/g, function (str) {\r\n            var len = str.length;\r\n            var ishour = str.indexOf('H') !== -1;\r\n            return _this.checkTwodigitNumber(Math.floor(ishour ? (no / 60) : (no % 60)), len);\r\n        });\r\n    };\r\n    return DateFormat;\r\n}());\r\nexport { DateFormat };\r\n",null]}