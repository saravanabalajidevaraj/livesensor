{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\internationalization.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\internationalization.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { DateFormat } from './intl/date-formatter';\r\nimport { NumberFormat } from './intl/number-formatter';\r\nimport { DateParser } from './intl/date-parser';\r\nimport { NumberParser } from './intl/number-parser';\r\nimport { IntlBase } from './intl/intl-base';\r\nimport { extend, getValue } from './util';\r\nimport { Observer } from './observer';\r\n/**\r\n * Specifies the observer used for external change detection.\r\n */\r\nexport var onIntlChange = new Observer();\r\n/**\r\n * Specifies the default rtl status for EJ2 components.\r\n */\r\nexport var rightToLeft = false;\r\n/**\r\n * Specifies the CLDR data loaded for internationalization functionalities.\r\n * @private\r\n */\r\nexport var cldrData = {};\r\n/**\r\n * Specifies the default culture value to be considered.\r\n * @private\r\n */\r\nexport var defaultCulture = 'en-US';\r\n/**\r\n * Specifies default currency code to be considered\r\n * @private\r\n */\r\nexport var defaultCurrencyCode = 'USD';\r\nvar mapper = ['numericObject', 'dateObject'];\r\n/**\r\n * Internationalization class provides support to parse and format the number and date object to the desired format.\r\n * ```typescript\r\n * // To set the culture globally\r\n * setCulture('en-GB');\r\n *\r\n * // To set currency code globally\r\n * setCurrencyCode('EUR');\r\n *\r\n * //Load cldr data\r\n * loadCldr(gregorainData);\r\n * loadCldr(timeZoneData);\r\n * loadCldr(numbersData);\r\n * loadCldr(numberSystemData);\r\n *\r\n * // To use formatter in component side\r\n * let Intl:Internationalization = new Internationalization();\r\n *\r\n * // Date formatting\r\n * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});\r\n * dateFormatter(new Date('11/2/2016'));\r\n * dateFormatter(new Date('25/2/2030'));\r\n * Intl.formatDate(new Date(),{skeleton:'E'});\r\n *\r\n * //Number formatting\r\n * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})\r\n * numberFormatter(24563334);\r\n * Intl.formatNumber(123123,{skeleton:'p2'});\r\n *\r\n * // Date parser\r\n * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});\r\n * dateParser('10:30 PM');\r\n * Intl.parseDate('10',{skeleton:'H'});\r\n * ```\r\n */\r\nvar Internationalization = /** @class */ /*@__PURE__*/ (function () {\r\n    function Internationalization(cultureName) {\r\n        if (cultureName) {\r\n            this.culture = cultureName;\r\n        }\r\n    }\r\n    /**\r\n     * Returns the format function for given options.\r\n     * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.\r\n     * @returns {Function}\r\n     */\r\n    Internationalization.prototype.getDateFormat = function (options) {\r\n        return DateFormat.dateFormat(this.getCulture(), options || { type: 'date', skeleton: 'short' }, cldrData);\r\n    };\r\n    /**\r\n     * Returns the format function for given options.\r\n     * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.\r\n     * @returns {Function}\r\n     */\r\n    Internationalization.prototype.getNumberFormat = function (options) {\r\n        if (options && !options.currency) {\r\n            options.currency = defaultCurrencyCode;\r\n        }\r\n        return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);\r\n    };\r\n    /**\r\n     * Returns the parser function for given options.\r\n     * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.\r\n     * @returns {Function}\r\n     * @private\r\n     */\r\n    Internationalization.prototype.getDateParser = function (options) {\r\n        return DateParser.dateParser(this.getCulture(), options || { skeleton: 'short', type: 'date' }, cldrData);\r\n    };\r\n    /**\r\n     * Returns the parser function for given options.\r\n     * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.\r\n     * @returns {Function}\r\n     */\r\n    Internationalization.prototype.getNumberParser = function (options) {\r\n        return NumberParser.numberParser(this.getCulture(), options || { format: 'N' }, cldrData);\r\n    };\r\n    /**\r\n     * Returns the formatted string based on format options.\r\n     * @param {Number} value - Specifies the number to format.\r\n     * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.\r\n     * @returns {string}\r\n     */\r\n    Internationalization.prototype.formatNumber = function (value, option) {\r\n        return this.getNumberFormat(option)(value);\r\n    };\r\n    /**\r\n     * Returns the formatted date string based on format options.\r\n     * @param {Number} value - Specifies the number to format.\r\n     * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.\r\n     * @returns {string}\r\n     */\r\n    Internationalization.prototype.formatDate = function (value, option) {\r\n        return this.getDateFormat(option)(value);\r\n    };\r\n    /**\r\n     * Returns the date object for given date string and options.\r\n     * @param {string} value - Specifies the string to parse.\r\n     * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.\r\n     * @returns {Date}\r\n     */\r\n    Internationalization.prototype.parseDate = function (value, option) {\r\n        return this.getDateParser(option)(value);\r\n    };\r\n    /**\r\n     * Returns the number object from the given string value and options.\r\n     * @param {string} value - Specifies the string to parse.\r\n     * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.\r\n     * @returns {number}\r\n     */\r\n    Internationalization.prototype.parseNumber = function (value, option) {\r\n        return this.getNumberParser(option)(value);\r\n    };\r\n    /**\r\n     * Returns Native Date Time Pattern\r\n     * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.\r\n     * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    Internationalization.prototype.getDatePattern = function (option, isExcelFormat) {\r\n        return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);\r\n    };\r\n    /**\r\n     * Returns Native Number Pattern\r\n     * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    Internationalization.prototype.getNumberPattern = function (option) {\r\n        return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData);\r\n    };\r\n    /**\r\n     * Returns the First Day of the Week\r\n     * @returns {number}\r\n     */\r\n    Internationalization.prototype.getFirstDayOfWeek = function () {\r\n        return IntlBase.getWeekData(this.getCulture(), cldrData);\r\n    };\r\n    Internationalization.prototype.getCulture = function () {\r\n        return this.culture || defaultCulture;\r\n    };\r\n    return Internationalization;\r\n}());\r\nexport { Internationalization };\r\n/**\r\n * Set the default culture to all EJ2 components\r\n * @param {string} cultureName - Specifies the culture name to be set as default culture.\r\n */\r\nexport function setCulture(cultureName) {\r\n    defaultCulture = cultureName;\r\n    onIntlChange.notify('notifyExternalChange', { 'locale': defaultCulture });\r\n}\r\n/**\r\n * Set the default currency code to all EJ2 components\r\n * @param {string} currencyCode Specifies the culture name to be set as default culture.\r\n * @returns {void}\r\n */\r\nexport function setCurrencyCode(currencyCode) {\r\n    defaultCurrencyCode = currencyCode;\r\n    onIntlChange.notify('notifyExternalChange', { 'currencyCode': defaultCurrencyCode });\r\n}\r\n/**\r\n * Load the CLDR data into context\r\n * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.\r\n * @returns {void}\r\n */\r\nexport function loadCldr() {\r\n    var data = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        data[_i] = arguments[_i];\r\n    }\r\n    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\r\n        var obj = data_1[_a];\r\n        extend(cldrData, obj, {}, true);\r\n    }\r\n}\r\n/**\r\n * To enable or disable RTL functionality for all components globally.\r\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.\r\n * @returns {void}\r\n */\r\nexport function enableRtl(status) {\r\n    if (status === void 0) {\r\n        status = true;\r\n    }\r\n    rightToLeft = status;\r\n    onIntlChange.notify('notifyExternalChange', { enableRtl: rightToLeft });\r\n}\r\n/**\r\n * To get the numeric CLDR object for given culture\r\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\r\n * @ignore\r\n * @private\r\n */\r\nexport function getNumericObject(locale, type) {\r\n    /* tslint:disable no-any */\r\n    var numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];\r\n    var dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];\r\n    var numSystem = getValue('defaultNumberingSystem', numObject);\r\n    var symbPattern = getValue('symbols-numberSystem-' + numSystem, numObject);\r\n    var pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);\r\n    return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), { 'dateSeparator': IntlBase.getDateSeparator(dateObject) });\r\n}\r\n/**\r\n * To get the default date CLDR object.\r\n * @ignore\r\n * @private\r\n */\r\nexport function getDefaultDateObject(mode) {\r\n    return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];\r\n}\r\n",null]}