{"remainingRequest":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-angular-base\\src\\form-base.js","dependencies":[{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-angular-base\\src\\form-base.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { getValue, setValue, isNullOrUndefined, isObject } from '@syncfusion/ej2-base';\r\n/**\r\n * Angular Form Base Module\r\n */\r\nvar FormBase = /** @class */ /*@__PURE__*/ (function () {\r\n    function FormBase() {\r\n    }\r\n    FormBase.prototype.propagateChange = function (_) { return; };\r\n    FormBase.prototype.propagateTouch = function () { return; };\r\n    FormBase.prototype.localChange = function (e) {\r\n        var value = (e.checked === undefined ? e.value : e.checked);\r\n        this.objCheck = isObject(value);\r\n        if (this.objCheck === true) {\r\n            this.duplicateValue = JSON.stringify(value);\r\n            this.duplicateAngularValue = JSON.stringify(this.angularValue);\r\n            if (this.duplicateValue !== this.duplicateAngularValue && this.propagateChange !== undefined && value !== undefined) {\r\n                // Update angular from our control\r\n                this.propagateChange(value);\r\n                this.angularValue = value;\r\n            }\r\n        }\r\n        else {\r\n            if (value !== this.angularValue && this.propagateChange !== undefined && value !== undefined) {\r\n                // Update angular from our control\r\n                this.propagateChange(value);\r\n                this.angularValue = value;\r\n            }\r\n        }\r\n    };\r\n    FormBase.prototype.registerOnChange = function (registerFunction) {\r\n        this.propagateChange = registerFunction;\r\n    };\r\n    FormBase.prototype.registerOnTouched = function (registerFunction) {\r\n        this.propagateTouch = registerFunction;\r\n    };\r\n    FormBase.prototype.twoWaySetter = function (newVal, prop) {\r\n        var oldVal = getValue(prop, this.properties);\r\n        var ele = this.inputElement || this.element;\r\n        if (oldVal === newVal &&\r\n            (ele.value === undefined || ele.value === '')) {\r\n            return;\r\n        }\r\n        this.saveChanges(prop, newVal, oldVal);\r\n        setValue(prop, (isNullOrUndefined(newVal) ? null : newVal), this.properties);\r\n        getValue(prop + 'Change', this).emit(newVal);\r\n    };\r\n    FormBase.prototype.ngAfterViewInit = function () {\r\n        var _this = this;\r\n        // Used setTimeout for template binding\r\n        // Refer Link: https://github.com/angular/angular/issues/6005\r\n        setTimeout(function () {\r\n            /* istanbul ignore else */\r\n            if (typeof window !== 'undefined') {\r\n                _this.appendTo(_this.element);\r\n                var ele = _this.inputElement || _this.element;\r\n                ele.addEventListener('focus', _this.ngOnFocus.bind(_this));\r\n                ele.addEventListener('blur', _this.ngOnBlur.bind(_this));\r\n            }\r\n        });\r\n    };\r\n    FormBase.prototype.setDisabledState = function (disabled) {\r\n        this.enabled = !disabled;\r\n    };\r\n    FormBase.prototype.writeValue = function (value) {\r\n        //update control value from angular\r\n        if (this.checked === undefined) {\r\n            this.value = value;\r\n        }\r\n        else {\r\n            if (typeof value === 'boolean') {\r\n                this.checked = value;\r\n            }\r\n            else {\r\n                this.checked = value === this.value;\r\n            }\r\n        }\r\n        if (value === null) {\r\n            return;\r\n        }\r\n        this.angularValue = value;\r\n    };\r\n    FormBase.prototype.ngOnFocus = function (e) {\r\n        /* istanbul ignore else */\r\n        if (this.skipFromEvent !== true) {\r\n            this.focus.emit(e);\r\n        }\r\n    };\r\n    FormBase.prototype.ngOnBlur = function (e) {\r\n        this.propagateTouch();\r\n        /* istanbul ignore else */\r\n        if (this.skipFromEvent !== true) {\r\n            this.blur.emit(e);\r\n        }\r\n    };\r\n    return FormBase;\r\n}());\r\nexport { FormBase };\r\n",null]}