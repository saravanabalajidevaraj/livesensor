{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\event-handler.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\event-handler.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { debounce, extend } from './util';\r\n/**\r\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\r\n * @private\r\n * ```html\r\n * <div id=\"Eventdiv\">  </div>\r\n * <script>\r\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\r\n *   EventHandler.addEventListener(node, \"click\", function(){\r\n *       // click handler function code\r\n *   });\r\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\r\n *       // mouseover handler function code\r\n *   });\r\n *   EventHandler.removeEventListener(node, \"click\", function(){\r\n *       // click handler function code\r\n *   });\r\n *   eventObj.clearEvents();\r\n * </script>\r\n * ```\r\n */\r\nvar EventHandler = /** @class */ /*@__PURE__*/ (function () {\r\n    function EventHandler() {\r\n    }\r\n    // to get the event data based on element\r\n    EventHandler.addOrGetEventData = function (element) {\r\n        if ('__eventList' in element) {\r\n            return element.__eventList.events;\r\n        }\r\n        else {\r\n            element.__eventList = {};\r\n            return element.__eventList.events = [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event to the specified DOM element.\r\n     * @param {any} element - Target HTML DOM element\r\n     * @param {string} eventName - A string that specifies the name of the event\r\n     * @param {Function} listener - Specifies the function to run when the event occurs\r\n     * @param {Object} bindTo - A object that binds 'this' variable in the event handler\r\n     * @param {number} debounce - Specifies at what interval given event listener should be triggered.\r\n     * @return {Function}\r\n     */\r\n    EventHandler.add = function (element, eventName, listener, bindTo, intDebounce) {\r\n        var eventData = EventHandler.addOrGetEventData(element);\r\n        var debounceListener;\r\n        if (intDebounce) {\r\n            debounceListener = debounce(listener, intDebounce);\r\n        }\r\n        else {\r\n            debounceListener = listener;\r\n        }\r\n        if (bindTo) {\r\n            debounceListener = debounceListener.bind(bindTo);\r\n        }\r\n        var event = eventName.split(' ');\r\n        for (var i = 0; i < event.length; i++) {\r\n            eventData.push({\r\n                name: event[i],\r\n                listener: listener,\r\n                debounce: debounceListener\r\n            });\r\n            element.addEventListener(event[i], debounceListener);\r\n        }\r\n        return debounceListener;\r\n    };\r\n    /**\r\n     * Remove an event listener that has been attached before.\r\n     * @param {any} element - Specifies the target html element to remove the event\r\n     * @param {string} eventName - A string that specifies the name of the event to remove\r\n     * @param {Function} listener - Specifies the function to remove\r\n     * @return {void}\r\n     */\r\n    EventHandler.remove = function (element, eventName, listener) {\r\n        var eventData = EventHandler.addOrGetEventData(element);\r\n        var event = eventName.split(' ');\r\n        var _loop_1 = function (j) {\r\n            var index = -1;\r\n            var debounceListener;\r\n            if (eventData && eventData.length !== 0) {\r\n                eventData.some(function (x, i) {\r\n                    return x.name === event[j] && x.listener === listener ?\r\n                        (index = i, debounceListener = x.debounce, true) : false;\r\n                });\r\n            }\r\n            if (index !== -1) {\r\n                eventData.splice(index, 1);\r\n            }\r\n            if (debounceListener) {\r\n                element.removeEventListener(event[j], debounceListener);\r\n            }\r\n        };\r\n        for (var j = 0; j < event.length; j++) {\r\n            _loop_1(j);\r\n        }\r\n    };\r\n    /**\r\n     * Clear all the event listeners that has been previously attached to the element.\r\n     * @param {any} element - Specifies the target html element to clear the events\r\n     * @return {void}\r\n     */\r\n    EventHandler.clearEvents = function (element) {\r\n        var eventData;\r\n        var copyData;\r\n        eventData = EventHandler.addOrGetEventData(element);\r\n        copyData = extend([], copyData, eventData);\r\n        for (var i = 0; i < copyData.length; i++) {\r\n            element.removeEventListener(copyData[i].name, copyData[i].debounce);\r\n            eventData.shift();\r\n        }\r\n    };\r\n    /**\r\n     * Trigger particular event of the element.\r\n     * @param {any} element - Specifies the target html element to trigger the events\r\n     * @param {string} eventName - Specifies the event to trigger for the specified element.\r\n     * Can be a custom event, or any of the standard events.\r\n     * @param {any} eventProp - Additional parameters to pass on to the event properties\r\n     * @return {void}\r\n     */\r\n    EventHandler.trigger = function (element, eventName, eventProp) {\r\n        var eventData = EventHandler.addOrGetEventData(element);\r\n        var fn = null;\r\n        for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\r\n            var event_1 = eventData_1[_i];\r\n            if (event_1.name === eventName) {\r\n                event_1.debounce.call(this, eventProp);\r\n            }\r\n        }\r\n    };\r\n    return EventHandler;\r\n}());\r\nexport { EventHandler };\r\n",null]}