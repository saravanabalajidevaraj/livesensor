{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-angular-navigations\\src\\treeview\\treeview.component.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-angular-navigations\\src\\treeview\\treeview.component.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, Renderer2, Injector, ContentChild } from '@angular/core';\nimport { ComponentBase, ComponentMixins, setValue } from '@syncfusion/ej2-angular-base';\nimport { TreeView } from '@syncfusion/ej2-navigations';\nimport { Template } from '@syncfusion/ej2-angular-base';\nexport var inputs = ['allowDragAndDrop', 'allowEditing', 'allowMultiSelection', 'animation', 'autoCheck', 'checkedNodes', 'cssClass', 'enablePersistence', 'enableRtl', 'expandOn', 'expandedNodes', 'fields', 'fullRowSelect', 'loadOnDemand', 'locale', 'nodeTemplate', 'selectedNodes', 'showCheckBox', 'sortOrder'];\nexport var outputs = ['created', 'dataBound', 'dataSourceChanged', 'destroyed', 'drawNode', 'keyPress', 'nodeChecked', 'nodeChecking', 'nodeClicked', 'nodeCollapsed', 'nodeCollapsing', 'nodeDragStart', 'nodeDragStop', 'nodeDragging', 'nodeDropped', 'nodeEdited', 'nodeEditing', 'nodeExpanded', 'nodeExpanding', 'nodeSelected', 'nodeSelecting'];\nexport var twoWays = [''];\n/**\n * TreeView component is used to represent the hierarchical data in tree like structure with advanced functions to perform edit, drag and drop, selection with check-box and more.\n * ```html\n * <ej-treeview allowDragAndDrop='true'></ej-treeview>\n * ```\n */\nvar TreeViewComponent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(TreeViewComponent, _super);\n    function TreeViewComponent(ngEle, srenderer, viewContainerRef, injector) {\n        var _this = _super.call(this) || this;\n        _this.ngEle = ngEle;\n        _this.srenderer = srenderer;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        _this.element = _this.ngEle.nativeElement;\n        _this.injectedModules = _this.injectedModules || [];\n        _this.registerEvents(outputs);\n        _this.addTwoWay.call(_this, twoWays);\n        setValue('currentInstance', _this, _this.viewContainerRef);\n        return _this;\n    }\n    TreeViewComponent.prototype.ngOnInit = function () {\n    };\n    TreeViewComponent.prototype.ngAfterViewInit = function () {\n    };\n    TreeViewComponent.prototype.ngOnDestroy = function () {\n    };\n    TreeViewComponent.prototype.ngAfterContentChecked = function () {\n    };\n    __decorate([\n        Template(),\n        __metadata(\"design:type\", Object)\n    ], TreeViewComponent.prototype, \"nodeTemplate\", void 0);\n    TreeViewComponent = __decorate([\n        ComponentMixins([ComponentBase])\n    ], TreeViewComponent);\n    return TreeViewComponent;\n}(TreeView));\nexport { TreeViewComponent };\n//# sourceMappingURL=treeview.component.js.map\n",null]}