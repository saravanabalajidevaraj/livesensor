{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\svg-renderer.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\svg-renderer.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * To import utils\r\n */\r\nimport { isNullOrUndefined, } from './util';\r\nvar SvgRenderer = /** @class */ /*@__PURE__*/ (function () {\r\n    /* End-Properties */\r\n    function SvgRenderer(rootID) {\r\n        //Internal Variables \r\n        this.svgLink = 'http://www.w3.org/2000/svg';\r\n        this.rootId = rootID;\r\n    }\r\n    // method to get the attributes value\r\n    /* tslint:disable */\r\n    SvgRenderer.prototype.getOptionValue = function (options, key) {\r\n        return options[key];\r\n    }; /* tslint:enable */\r\n    /**\r\n     * To create a Html5 SVG element\r\n     * @param {SVGAttributes} options - Options to create SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createSvg = function (options) {\r\n        if (isNullOrUndefined(options.id)) {\r\n            options.id = this.rootId + '_svg';\r\n        }\r\n        this.svgObj = document.getElementById(options.id);\r\n        if (isNullOrUndefined(document.getElementById(options.id))) {\r\n            this.svgObj = document.createElementNS(this.svgLink, 'svg');\r\n        }\r\n        this.svgObj = this.setElementAttributes(options, this.svgObj);\r\n        this.setSVGSize(options.width, options.height);\r\n        return this.svgObj;\r\n    };\r\n    // method to set the height and width for the SVG element\r\n    SvgRenderer.prototype.setSVGSize = function (width, height) {\r\n        var element = document.getElementById(this.rootId);\r\n        var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\r\n        if (isNullOrUndefined(this.width) || this.width <= 0) {\r\n            this.svgObj.setAttribute('width', width ? width.toString() : size.width.toString());\r\n        }\r\n        else {\r\n            this.svgObj.setAttribute('width', this.width.toString());\r\n        }\r\n        if (isNullOrUndefined(this.height) || this.height <= 0) {\r\n            this.svgObj.setAttribute('height', height ? height.toString() : '450');\r\n        }\r\n        else {\r\n            this.svgObj.setAttribute('height', this.height.toString());\r\n        }\r\n    };\r\n    /**\r\n     * To draw a path\r\n     * @param {PathAttributes} options - Options to draw a path in SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawPath = function (options) {\r\n        var path = document.getElementById(options.id);\r\n        if (path === null) {\r\n            path = document.createElementNS(this.svgLink, 'path');\r\n        }\r\n        path = this.setElementAttributes(options, path);\r\n        return path;\r\n    };\r\n    /**\r\n     * To draw a line\r\n     * @param {LineAttributes} options - Options to draw a line in SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawLine = function (options) {\r\n        var line = document.getElementById(options.id);\r\n        if (line === null) {\r\n            line = document.createElementNS(this.svgLink, 'line');\r\n        }\r\n        line = this.setElementAttributes(options, line);\r\n        return line;\r\n    };\r\n    /**\r\n     * To draw a rectangle\r\n     * @param {BaseAttibutes} options - Required options to draw a rectangle in SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawRectangle = function (options) {\r\n        var rectangle = document.getElementById(options.id);\r\n        if (rectangle === null) {\r\n            rectangle = document.createElementNS(this.svgLink, 'rect');\r\n        }\r\n        rectangle = this.setElementAttributes(options, rectangle);\r\n        return rectangle;\r\n    };\r\n    /**\r\n     * To draw a circle\r\n     * @param {CircleAttributes} options - Required options to draw a circle in SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawCircle = function (options) {\r\n        var circle = document.getElementById(options.id);\r\n        if (circle === null) {\r\n            circle = document.createElementNS(this.svgLink, 'circle');\r\n        }\r\n        circle = this.setElementAttributes(options, circle);\r\n        return circle;\r\n    };\r\n    /**\r\n     * To draw a polyline\r\n     * @param {PolylineAttributes} options - Options required to draw a polyline\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawPolyline = function (options) {\r\n        var polyline = document.getElementById(options.id);\r\n        if (polyline === null) {\r\n            polyline = document.createElementNS(this.svgLink, 'polyline');\r\n        }\r\n        polyline = this.setElementAttributes(options, polyline);\r\n        return polyline;\r\n    };\r\n    /**\r\n     * To draw an ellipse\r\n     * @param {EllipseAttributes} options - Options required to draw an ellipse\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawEllipse = function (options) {\r\n        var ellipse = document.getElementById(options.id);\r\n        if (ellipse === null) {\r\n            ellipse = document.createElementNS(this.svgLink, 'ellipse');\r\n        }\r\n        ellipse = this.setElementAttributes(options, ellipse);\r\n        return ellipse;\r\n    };\r\n    /**\r\n     * To draw a polygon\r\n     * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawPolygon = function (options) {\r\n        var polygon = document.getElementById(options.id);\r\n        if (polygon === null) {\r\n            polygon = document.createElementNS(this.svgLink, 'polygon');\r\n        }\r\n        polygon = this.setElementAttributes(options, polygon);\r\n        return polygon;\r\n    };\r\n    /**\r\n     * To draw an image\r\n     * @param {ImageAttributes} options - Required options to draw an image in SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawImage = function (options) {\r\n        var img = document.createElementNS(this.svgLink, 'image');\r\n        img.setAttributeNS(null, 'height', options.height.toString());\r\n        img.setAttributeNS(null, 'width', options.width.toString());\r\n        img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.href);\r\n        img.setAttributeNS(null, 'x', options.x.toString());\r\n        img.setAttributeNS(null, 'y', options.y.toString());\r\n        img.setAttributeNS(null, 'id', options.id);\r\n        img.setAttributeNS(null, 'visibility', options.visibility);\r\n        if (!isNullOrUndefined(this.getOptionValue(options, 'clip-path'))) {\r\n            img.setAttributeNS(null, 'clip-path', this.getOptionValue(options, 'clip-path'));\r\n        }\r\n        if (!isNullOrUndefined(options.preserveAspectRatio)) {\r\n            img.setAttributeNS(null, 'preserveAspectRatio', options.preserveAspectRatio);\r\n        }\r\n        return img;\r\n    };\r\n    /**\r\n     * To draw a text\r\n     * @param {TextAttributes} options - Options needed to draw a text in SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createText = function (options, label) {\r\n        var text = document.createElementNS(this.svgLink, 'text');\r\n        text = this.setElementAttributes(options, text);\r\n        if (!isNullOrUndefined(label)) {\r\n            text.textContent = label;\r\n        }\r\n        return text;\r\n    };\r\n    /**\r\n     * To create a tSpan\r\n     * @param {TextAttributes} options - Options to create tSpan\r\n     * @param {string} label - The text content which is to be rendered in the tSpan\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createTSpan = function (options, label) {\r\n        var tSpan = document.createElementNS(this.svgLink, 'tspan');\r\n        tSpan = this.setElementAttributes(options, tSpan);\r\n        if (!isNullOrUndefined(label)) {\r\n            tSpan.textContent = label;\r\n        }\r\n        return tSpan;\r\n    };\r\n    /**\r\n     * To create a title\r\n     * @param {string} text - The text content which is to be rendered in the title\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createTitle = function (text) {\r\n        var title = document.createElementNS(this.svgLink, 'title');\r\n        title.textContent = text;\r\n        return title;\r\n    };\r\n    /**\r\n     * To create defs element in SVG\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createDefs = function () {\r\n        var defs = document.createElementNS(this.svgLink, 'defs');\r\n        return defs;\r\n    };\r\n    /**\r\n     * To create clip path in SVG\r\n     * @param {BaseAttibutes} options - Options needed to create clip path\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createClipPath = function (options) {\r\n        var clipPath = document.createElementNS(this.svgLink, 'clipPath');\r\n        clipPath = this.setElementAttributes(options, clipPath);\r\n        return clipPath;\r\n    };\r\n    /**\r\n     * To create foreign object in SVG\r\n     * @param {BaseAttibutes} options - Options needed to create foreign object\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createForeignObject = function (options) {\r\n        var foreignObject = document.createElementNS(this.svgLink, 'foreignObject');\r\n        foreignObject = this.setElementAttributes(options, foreignObject);\r\n        return foreignObject;\r\n    };\r\n    /**\r\n     * To create group element in SVG\r\n     * @param {BaseAttibutes} options - Options needed to create group\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createGroup = function (options) {\r\n        var group = document.createElementNS(this.svgLink, 'g');\r\n        group = this.setElementAttributes(options, group);\r\n        return group;\r\n    };\r\n    /**\r\n     * To create pattern in SVG\r\n     * @param {PatternAttributes} options - Required options to create pattern in SVG\r\n     * @param {string} type - Specifies the name of the pattern\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.createPattern = function (options, element) {\r\n        var pattern = document.createElementNS(this.svgLink, element);\r\n        pattern = this.setElementAttributes(options, pattern);\r\n        return pattern;\r\n    };\r\n    /**\r\n     * To create radial gradient in SVG\r\n     * @param {string[]} colors - Specifies the colors required to create radial gradient\r\n     * @param {string[]} colorStop - Specifies the colorstop required to create radial gradient\r\n     * @param {string} name - Specifies the name of the gradient\r\n     * @param {RadialGradient} options - value for radial gradient\r\n     * @return {string}\r\n     */\r\n    SvgRenderer.prototype.createRadialGradient = function (colors, name, options) {\r\n        var colorName;\r\n        if (!isNullOrUndefined(colors[0].colorStop)) {\r\n            var newOptions = {\r\n                'id': this.rootId + '_' + name + 'radialGradient',\r\n                'cx': options.cx + '%',\r\n                'cy': options.cy + '%',\r\n                'r': options.r + '%',\r\n                'fx': options.fx + '%',\r\n                'fy': options.fy + '%'\r\n            };\r\n            this.drawGradient('radialGradient', newOptions, colors);\r\n            colorName = 'url(#' + this.rootId + '_' + name + 'radialGradient)';\r\n        }\r\n        else {\r\n            colorName = colors[0].color.toString();\r\n        }\r\n        return colorName;\r\n    };\r\n    /**\r\n     * To create linear gradient in SVG\r\n     * @param {string[]} colors - Array of string specifies the values for color\r\n     * @param {string[]} colors - Array of string specifies the values for colorStop\r\n     * @param {string} name - Specifies the name of the gradient\r\n     * @param {LinearGradient} options - Specifies the options for gradient\r\n     * @return {string}\r\n     */\r\n    SvgRenderer.prototype.createLinearGradient = function (colors, name, options) {\r\n        var colorName;\r\n        if (!isNullOrUndefined(colors[0].colorStop)) {\r\n            var newOptions = {\r\n                'id': this.rootId + '_' + name + 'linearGradient',\r\n                'x1': options.x1 + '%',\r\n                'y1': options.y1 + '%',\r\n                'x2': options.x2 + '%',\r\n                'y2': options.y2 + '%'\r\n            };\r\n            this.drawGradient('linearGradient', newOptions, colors);\r\n            colorName = 'url(#' + this.rootId + '_' + name + 'linearGradient)';\r\n        }\r\n        else {\r\n            colorName = colors[0].color.toString();\r\n        }\r\n        return colorName;\r\n    };\r\n    /**\r\n     * To render the gradient element in SVG\r\n     * @param {string} gradientType - Specifies the type of the gradient\r\n     * @param {RadialGradient | LinearGradient} options - Options required to render a gradient\r\n     * @param {string[]} colors - Array of string specifies the values for color\r\n     * @param {string[]} colorStop - Array of string specifies the values for colorStop\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawGradient = function (gradientType, options, colors) {\r\n        var defs = this.createDefs();\r\n        var gradient = document.createElementNS(this.svgLink, gradientType);\r\n        gradient = this.setElementAttributes(options, gradient);\r\n        for (var i = 0; i < colors.length; i++) {\r\n            var stop_1 = document.createElementNS(this.svgLink, 'stop');\r\n            stop_1.setAttribute('offset', colors[i].colorStop);\r\n            stop_1.setAttribute('stop-color', colors[i].color);\r\n            stop_1.setAttribute('stop-opacity', '1');\r\n            gradient.appendChild(stop_1);\r\n        }\r\n        defs.appendChild(gradient);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To render a clip path\r\n     * @param {BaseAttibutes} options - Options required to render a clip path\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawClipPath = function (options) {\r\n        var defs = this.createDefs();\r\n        var clipPath = this.createClipPath({ 'id': options.id });\r\n        var rect = this.drawRectangle(options);\r\n        clipPath.appendChild(rect);\r\n        defs.appendChild(clipPath);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To create circular clip path in SVG\r\n     * @param {CircleAttributes} options - Options required to create circular clip path\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.drawCircularClipPath = function (options) {\r\n        var defs = this.createDefs();\r\n        var clipPath = this.createClipPath({ 'id': options.id });\r\n        var circle = this.drawCircle(options);\r\n        clipPath.appendChild(circle);\r\n        defs.appendChild(clipPath);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To set the attributes to the element\r\n     * @param {SVGCanvasAttributes} options - Attributes to set for the element\r\n     * @param {Element} element - The element to which the attributes need to be set\r\n     * @return {Element}\r\n     */\r\n    SvgRenderer.prototype.setElementAttributes = function (options, element) {\r\n        var keys = Object.keys(options);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            element.setAttribute(keys[i], options[keys[i]]);\r\n        }\r\n        return element;\r\n    };\r\n    return SvgRenderer;\r\n}());\r\nexport { SvgRenderer };\r\n",null]}