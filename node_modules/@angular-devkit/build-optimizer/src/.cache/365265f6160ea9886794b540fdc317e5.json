{"remainingRequest":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-base\\src\\template-engine.js","dependencies":[{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@syncfusion\\ej2-base\\src\\template-engine.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\sensorsecurity\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * Template Engine Bridge\r\n */\r\nimport { compile as render } from './template';\r\nimport { createElement } from './dom';\r\nvar HAS_ROW = /^[\\n\\r.]+\\<tr|^\\<tr/;\r\nvar HAS_SVG = /^[\\n\\r.]+\\<svg|^\\<path|^\\<g/;\r\n/**\r\n * Compile the template string into template function.\r\n * @param  {string} templateString - The template string which is going to convert.\r\n * @param  {Object} helper? - Helper functions as an object.\r\n * @private\r\n */\r\n//tslint:disable-next-line\r\nexport function compile(templateString, helper) {\r\n    var compiler = engineObj.compile(templateString, helper);\r\n    //tslint:disable-next-line\r\n    return function (data, component, propName) {\r\n        var result = compiler(data, component, propName);\r\n        if (typeof result === 'string') {\r\n            if (HAS_SVG.test(result)) {\r\n                var ele = createElement('svg', { innerHTML: result });\r\n                return ele.childNodes;\r\n            }\r\n            else {\r\n                var ele = createElement((HAS_ROW.test(result) ? 'table' : 'div'), { innerHTML: result });\r\n                return ele.childNodes;\r\n            }\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    };\r\n}\r\n/**\r\n * Set your custom template engine for template rendering.\r\n * @param  {ITemplateEngine} classObj - Class object for custom template.\r\n * @private\r\n */\r\nexport function setTemplateEngine(classObj) {\r\n    engineObj.compile = classObj.compile;\r\n}\r\n/**\r\n * Get current template engine for template rendering.\r\n * @param  {ITemplateEngine} classObj - Class object for custom template.\r\n * @private\r\n */\r\nexport function getTemplateEngine() {\r\n    return engineObj.compile;\r\n}\r\n//Default Engine Class\r\nvar Engine = /** @class */ /*@__PURE__*/ (function () {\r\n    function Engine() {\r\n    }\r\n    Engine.prototype.compile = function (templateString, helper) {\r\n        if (helper === void 0) {\r\n            helper = {};\r\n        }\r\n        return render(templateString, helper);\r\n    };\r\n    return Engine;\r\n}());\r\nvar engineObj = { compile: new Engine().compile };\r\n",null]}