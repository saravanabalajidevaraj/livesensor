{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\observer.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-base\\src\\observer.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { isNullOrUndefined, getValue } from './util';\r\nvar Observer = /** @class */ /*@__PURE__*/ (function () {\r\n    function Observer(context) {\r\n        this.ranArray = [];\r\n        this.boundedEvents = {};\r\n        if (isNullOrUndefined(context)) {\r\n            return;\r\n        }\r\n        this.context = context;\r\n    }\r\n    ;\r\n    /**\r\n     * To attach handler for given property in current context.\r\n     * @param {string} property - specifies the name of the event.\r\n     * @param {Function} handler - Specifies the handler function to be called while event notified.\r\n     * @param {Object} context - Specifies the context binded to the handler.\r\n     * @param {string} id - specifies the random generated id.\r\n     * @return {void}\r\n     */\r\n    Observer.prototype.on = function (property, handler, context, id) {\r\n        if (isNullOrUndefined(handler)) {\r\n            return;\r\n        }\r\n        var cntxt = context || this.context;\r\n        if (this.notExist(property)) {\r\n            this.boundedEvents[property] = [{ handler: handler, context: cntxt }];\r\n            return;\r\n        }\r\n        if (!isNullOrUndefined(id)) {\r\n            if (this.ranArray.indexOf(id) === -1) {\r\n                this.ranArray.push(id);\r\n                this.boundedEvents[property].push({ handler: handler, context: cntxt, id: id });\r\n            }\r\n        }\r\n        else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {\r\n            this.boundedEvents[property].push({ handler: handler, context: cntxt });\r\n        }\r\n    };\r\n    /**\r\n     * To remove handlers from a event attached using on() function.\r\n     * @param {string} eventName - specifies the name of the event.\r\n     * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.\r\n     * @param {string} id - specifies the random generated id.\r\n     * @return {void}\r\n     */\r\n    Observer.prototype.off = function (property, handler, id) {\r\n        if (this.notExist(property)) {\r\n            return;\r\n        }\r\n        var curObject = getValue(property, this.boundedEvents);\r\n        if (handler) {\r\n            for (var i = 0; i < curObject.length; i++) {\r\n                if (id) {\r\n                    if (curObject[i].id === id) {\r\n                        curObject.splice(i, 1);\r\n                        var indexLocation = this.ranArray.indexOf(id);\r\n                        if (indexLocation !== -1) {\r\n                            this.ranArray.splice(indexLocation, 1);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                else if (handler === curObject[i].handler) {\r\n                    curObject.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this.boundedEvents[property];\r\n        }\r\n    };\r\n    /**\r\n     * To notify the handlers in the specified event.\r\n     * @param {string} property - Specifies the event to be notify.\r\n     *  @param {Object} args - Additional parameters to pass while calling the handler.\r\n     * @return {void}\r\n     */\r\n    Observer.prototype.notify = function (property, argument) {\r\n        if (this.notExist(property)) {\r\n            return;\r\n        }\r\n        if (argument) {\r\n            argument.name = property;\r\n        }\r\n        var curObject = getValue(property, this.boundedEvents).slice(0);\r\n        for (var _i = 0, curObject_1 = curObject; _i < curObject_1.length; _i++) {\r\n            var cur = curObject_1[_i];\r\n            cur.handler.call(cur.context, argument);\r\n        }\r\n    };\r\n    /**\r\n     * To destroy handlers in the event\r\n     */\r\n    Observer.prototype.destroy = function () {\r\n        this.boundedEvents = this.context = undefined;\r\n    };\r\n    /**\r\n     * Returns if the property exists.\r\n     */\r\n    Observer.prototype.notExist = function (prop) {\r\n        return this.boundedEvents.hasOwnProperty(prop) === false;\r\n    };\r\n    /**\r\n     * Returns if the handler is present.\r\n     */\r\n    Observer.prototype.isHandlerPresent = function (boundedEvents, handler) {\r\n        for (var _i = 0, boundedEvents_1 = boundedEvents; _i < boundedEvents_1.length; _i++) {\r\n            var cur = boundedEvents_1[_i];\r\n            if (cur.handler === handler) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return Observer;\r\n}());\r\nexport { Observer };\r\n",null]}