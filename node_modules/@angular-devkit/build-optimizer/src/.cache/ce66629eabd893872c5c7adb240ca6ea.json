{"remainingRequest":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-angular-base\\src\\complex-array-base.js","dependencies":[{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@syncfusion\\ej2-angular-base\\src\\complex-array-base.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1620568869347},{"path":"D:\\xampp\\htdocs\\live-security-web-app1\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { getValue, setValue } from '@syncfusion/ej2-base';\r\nimport { clearTemplate, registerEvents } from './util';\r\nvar ComplexBase = /** @class */ /*@__PURE__*/ (function () {\r\n    function ComplexBase() {\r\n        this.hasChanges = false;\r\n        this.propCollection = {};\r\n        this.tags = [];\r\n        this.tagObjects = [];\r\n    }\r\n    ComplexBase.prototype.ngOnInit = function () {\r\n        this.registeredTemplate = {};\r\n        for (var _i = 0, _a = this.tags; _i < _a.length; _i++) {\r\n            var tag = _a[_i];\r\n            var objInstance = getValue('child' + tag.substring(0, 1).toUpperCase() + tag.substring(1), this);\r\n            if (objInstance) {\r\n                this.tagObjects.push({ instance: objInstance, name: tag });\r\n            }\r\n        }\r\n        var templateProperties = Object.keys(this);\r\n        templateProperties = templateProperties.filter(function (val) {\r\n            return /Ref$/i.test(val);\r\n        });\r\n        for (var _b = 0, templateProperties_1 = templateProperties; _b < templateProperties_1.length; _b++) {\r\n            var tempName = templateProperties_1[_b];\r\n            var propName = tempName.replace('Ref', '');\r\n            setValue(propName.replace('_', '.'), getValue(propName, this), this.propCollection);\r\n        }\r\n    };\r\n    ComplexBase.prototype.registerEvents = function (eventList) {\r\n        registerEvents(eventList, this, true);\r\n    };\r\n    ComplexBase.prototype.ngOnChanges = function (changes) {\r\n        for (var _i = 0, _a = Object.keys(changes); _i < _a.length; _i++) {\r\n            var propName = _a[_i];\r\n            var changedVal = changes[propName];\r\n            this.propCollection[propName] = changedVal.currentValue;\r\n        }\r\n        this.hasChanges = true;\r\n    };\r\n    ComplexBase.prototype.clearTemplate = function (templateNames) {\r\n        clearTemplate(this, templateNames);\r\n    };\r\n    ComplexBase.prototype.getProperties = function () {\r\n        for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\r\n            var tagObject = _a[_i];\r\n            this.propCollection[tagObject.name] = tagObject.instance.getProperties();\r\n        }\r\n        return this.propCollection;\r\n    };\r\n    ComplexBase.prototype.isChanged = function () {\r\n        var result = this.hasChanges;\r\n        for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\r\n            var item = _a[_i];\r\n            result = result || item.instance.hasChanges;\r\n        }\r\n        return result;\r\n    };\r\n    ComplexBase.prototype.ngAfterContentChecked = function () {\r\n        this.hasChanges = this.isChanged();\r\n        var templateProperties = Object.keys(this);\r\n        templateProperties = templateProperties.filter(function (val) {\r\n            return /Ref$/i.test(val);\r\n        });\r\n    };\r\n    ComplexBase.prototype.ngAfterViewChecked = function () {\r\n        this.hasChanges = false;\r\n    };\r\n    return ComplexBase;\r\n}());\r\nexport { ComplexBase };\r\nvar ArrayBase = /** @class */ /*@__PURE__*/ (function () {\r\n    function ArrayBase(propertyName) {\r\n        this.list = [];\r\n        this.hasChanges = false;\r\n        this.propertyName = propertyName;\r\n    }\r\n    ArrayBase.prototype.ngOnInit = function () {\r\n        this.isInitChanges = true;\r\n    };\r\n    ArrayBase.prototype.ngAfterContentInit = function () {\r\n        var _this = this;\r\n        var index = 0;\r\n        this.list = this.children.map(function (child) {\r\n            child.index = index++;\r\n            child.property = _this.propertyName;\r\n            return child;\r\n        });\r\n        this.hasChanges = true;\r\n    };\r\n    ArrayBase.prototype.getProperties = function () {\r\n        var onlyProp = [];\r\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\r\n            var item = _a[_i];\r\n            onlyProp.push(item.getProperties());\r\n        }\r\n        return onlyProp;\r\n    };\r\n    ArrayBase.prototype.isChanged = function () {\r\n        var _this = this;\r\n        var result = false;\r\n        var index = 0;\r\n        /* istanbul ignore next */\r\n        this.hasNewChildren = (this.list.length !== this.children.length) ? true : null;\r\n        /* istanbul ignore next */\r\n        if (this.hasNewChildren) {\r\n            this.list = this.children.map(function (child) {\r\n                child.index = index++;\r\n                child.property = _this.propertyName;\r\n                return child;\r\n            });\r\n        }\r\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\r\n            var item = _a[_i];\r\n            result = result || item.hasChanges;\r\n        }\r\n        return !!this.list.length && result;\r\n    };\r\n    ArrayBase.prototype.clearTemplate = function (templateNames) {\r\n        var _this = this;\r\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\r\n            var item = _a[_i];\r\n            item.clearTemplate(templateNames && templateNames.map(function (val) {\r\n                return new RegExp(_this.propertyName).test(val) ? val.replace(_this.propertyName + '.', '') : val;\r\n            }));\r\n        }\r\n    };\r\n    ArrayBase.prototype.ngAfterContentChecked = function () {\r\n        this.hasChanges = this.isChanged();\r\n    };\r\n    ArrayBase.prototype.ngAfterViewInit = function () {\r\n        this.isInitChanges = false;\r\n    };\r\n    return ArrayBase;\r\n}());\r\nexport { ArrayBase };\r\n",null]}